/*
 * generated by Xtext 2.21.0
 */
package mdsd.tests

import com.google.inject.Inject
import mdsd.rPG.SystemRPG
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import mdsd.rPG.Entities
import mdsd.rPG.Entity
import org.eclipse.emf.ecore.EObject
import mdsd.rPG.Move
import mdsd.rPG.Effects

@ExtendWith(InjectionExtension)
@InjectWith(RPGInjectorProvider)
class RPGParsingTest {
	
	// Locations | Relations | Moves | Entities | Teams | Death | Attributes | Effects
	
	@Inject
	ParseHelper<SystemRPG> parseHelper
	
	@Test
	def void T00_loadModel() {

		val result = parseHelper.parse('''
			game TestGame
			
			location Test opponents TestTeamB
			
			relations
				type zero
					one < zero < two
				type one
					zero < one < two
				type two
					one < two < zero
			
			attributes
				attribute testAttributeOne is Integer
				attribute testAttributeTwo is Integer
				
			death require testAttributeOne <= 0
			
			effects
			    effect move TestEffect 
			    if testAttributeTwo > 0 then testAttributeOne is testAttributeOne-1
			    
			moves
				move testMove type one
					attribute testAttributeTwo is Integer
					effect move TestEffect
			
			entities
				entity TestEntityOne type one
					attribute testAttributeOne is 5
					move testMove
				entity TestEntityTwo type one
					attribute testAttributeOne is 5
					move testMove
					
			teams
				team TestTeamA
					members TestEntityOne
				team TestTeamB
					members TestEntityTwo
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void T01_testDeclarationSize() {
		val result = parseHelper.parse('''
			game TestGame
			
			location Test opponents TestTeamB
			
			relations
				type zero
					one < zero < two
				type one
					zero < one < two
				type two
					one < two < zero
			
			attributes
				attribute testAttributeOne is Integer
				attribute testAttributeTwo is Integer
				
			death require testAttributeOne <= 0
			
			effects
			    effect move TestEffect 
			    if testAttributeTwo > 0 then testAttributeOne is testAttributeOne-1
			    
			moves
				move testMove type one
					attribute testAttributeTwo is Integer
					effect move TestEffect
			
			entities
				entity TestEntityOne type one
					attribute testAttributeOne is 5
					move testMove
				entity TestEntityTwo type one
					attribute testAttributeOne is 5
					move testMove
					
			teams
				team TestTeamA
					members TestEntityOne
				team TestTeamB
					members TestEntityTwo
		''')
		Assertions.assertEquals(result.declarations.size(), 8)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	 
	@Test
	def void T02_testParseEntities() {
		val result = parseHelper.parse('''
			game TestGame
			
			location Test opponents TestTeamB
			
			relations
				type zero
					one < zero < two
				type one
					zero < one < two
				type two
					one < two < zero
			
			attributes
				attribute testAttributeOne is Integer
				attribute testAttributeTwo is Integer
				
			death require testAttributeOne <= 0
			
			effects
			    effect move TestEffect 
			    if testAttributeTwo > 0 then testAttributeOne is testAttributeOne-1
			    
			moves
				move testMove type one
					attribute testAttributeTwo is Integer
					effect move TestEffect
			
			entities
				entity TestEntityOne type one
					attribute testAttributeOne is 5
					move testMove
				entity TestEntityTwo type one
					attribute testAttributeOne is 5
					move testMove
					
			teams
				team TestTeamA
					members TestEntityOne
				team TestTeamB
					members TestEntityTwo
		''')
		Assertions.assertTrue(result.declarations.get(6) instanceof Entities)
		Assertions.assertTrue(result.declarations.get(6).eContents.size == 2)
		for(EObject e : result.declarations.get(6).eContents) {
			val temp = e as Entity
			Assertions.assertTrue(temp.name == "TestEntityOne" || temp.name == "TestEntityTwo")
			Assertions.assertTrue(temp.EMoves.move.size > 0)
			Assertions.assertTrue(temp.EMoves.move.get(0) instanceof Move)
			Assertions.assertTrue(temp.EMoves.move.get(0).name == "testMove")
		}
		
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void T03_testEntityExtends() {
		val result = parseHelper.parse('''
			game TestGame
			
			location Test opponents TestTeamB
			
			relations
				type zero
					one < zero < two
				type one
					zero < one < two
				type two
					one < two < zero
			
			attributes
				attribute testAttributeOne is Integer
				attribute testAttributeTwo is Integer
				attribute testAttributeThree is Integer
				
			death require testAttributeOne <= 0
			
			effects
			    effect move TestEffect 
			    if testAttributeTwo > 0 then testAttributeOne is testAttributeOne-1
			    
			moves
				move testMove type one
					attribute testAttributeTwo is Integer
					effect move TestEffect
				move testMoveTwo type one
					attribute testAttributeTwo is Integer
					effect move TestEffect
			
			entities
				entity TestEntityOne type one
					attribute testAttributeOne is 5
					move testMove
				entity TestEntityTwo extends TestEntityOne type one
					attribute testAttributeThree is 5
					move testMoveTwo
					
			teams
				team TestTeamA
					members TestEntityOne
				team TestTeamB
					members TestEntityTwo
		''')
		
		Assertions.assertTrue(result.declarations.get(6) instanceof Entities)
		
		val e_one = result.declarations.get(6).eContents.get(0) as Entity
		val e_two = result.declarations.get(6).eContents.get(1) as Entity

		Assertions.assertTrue(e_one.name == e_two.extend.name)
		
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
		@Test
	def void T04_testSeveralEffects() {
		val result = parseHelper.parse('''
			game TestGame
			
			location Test opponents TestTeamB
			
			relations
				type zero
					one < zero < two
				type one
					zero < one < two
				type two
					one < two < zero
			
			attributes
				attribute testAttributeOne is Integer
				attribute testAttributeTwo is Integer
				attribute testAttributeThree is Integer
				
			death require testAttributeOne <= 0
			
			effects
				effect move TestEffect 
				if testAttributeTwo > 0 then testAttributeOne is testAttributeOne-1, 
				testAttributeOne is testAttributeOne+2 hits user,
				testAttributeOne is testAttributeOne+2 hits user
			    
			moves
				move testMove type one
					attribute testAttributeTwo is Integer
					effect move TestEffect
				move testMoveTwo type one
					attribute testAttributeTwo is Integer
					effect move TestEffect
			
			entities
				entity TestEntityOne type one
					attribute testAttributeOne is 5
					move testMove
				entity TestEntityTwo extends TestEntityOne type one
					attribute testAttributeThree is 5
					move testMoveTwo
					
			teams
				team TestTeamA
					members TestEntityOne
				team TestTeamB
					members TestEntityTwo
		''')
		
		Assertions.assertTrue(result.declarations.get(4) instanceof Effects)
		val effects = result.declarations.get(4).eContents as Effects
		System.out.println(effects.effect.size)

		Assertions.assertTrue(e_one.name == e_two.extend.name)
		
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	
	
}
