/*
 * generated by Xtext 2.21.0
 */
package mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RPGGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SystemRPGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.SystemRPG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		
		//SystemRPG:
		//	'game' name=ID declarations+=Declaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//'game' name=ID declarations+=Declaration*
		public Group getGroup() { return cGroup; }
		
		//'game'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_0() { return cDeclarationsDeclarationParserRuleCall_2_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocationsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMovesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEntitiesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTeamsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDeathParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAttributesParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEffectsParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Declaration:
		//	Locations | Relations | Moves | Entities | Teams | Death | Attributes | Effects;
		@Override public ParserRule getRule() { return rule; }
		
		//Locations | Relations | Moves | Entities | Teams | Death | Attributes | Effects
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Locations
		public RuleCall getLocationsParserRuleCall_0() { return cLocationsParserRuleCall_0; }
		
		//Relations
		public RuleCall getRelationsParserRuleCall_1() { return cRelationsParserRuleCall_1; }
		
		//Moves
		public RuleCall getMovesParserRuleCall_2() { return cMovesParserRuleCall_2; }
		
		//Entities
		public RuleCall getEntitiesParserRuleCall_3() { return cEntitiesParserRuleCall_3; }
		
		//Teams
		public RuleCall getTeamsParserRuleCall_4() { return cTeamsParserRuleCall_4; }
		
		//Death
		public RuleCall getDeathParserRuleCall_5() { return cDeathParserRuleCall_5; }
		
		//Attributes
		public RuleCall getAttributesParserRuleCall_6() { return cAttributesParserRuleCall_6; }
		
		//Effects
		public RuleCall getEffectsParserRuleCall_7() { return cEffectsParserRuleCall_7; }
	}
	public class EffectsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Effects");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEffectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEffectEffectParserRuleCall_1_0 = (RuleCall)cEffectAssignment_1.eContents().get(0);
		
		//Effects:
		//	'effects' effect+=Effect+;
		@Override public ParserRule getRule() { return rule; }
		
		//'effects' effect+=Effect+
		public Group getGroup() { return cGroup; }
		
		//'effects'
		public Keyword getEffectsKeyword_0() { return cEffectsKeyword_0; }
		
		//effect+=Effect+
		public Assignment getEffectAssignment_1() { return cEffectAssignment_1; }
		
		//Effect
		public RuleCall getEffectEffectParserRuleCall_1_0() { return cEffectEffectParserRuleCall_1_0; }
	}
	public class EffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Effect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cBuffParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cMoveEParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cAfterEParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//Effect:
		//	'effect' (Buff | MoveE | AfterE);
		@Override public ParserRule getRule() { return rule; }
		
		//'effect' (Buff | MoveE | AfterE)
		public Group getGroup() { return cGroup; }
		
		//'effect'
		public Keyword getEffectKeyword_0() { return cEffectKeyword_0; }
		
		//(Buff | MoveE | AfterE)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Buff
		public RuleCall getBuffParserRuleCall_1_0() { return cBuffParserRuleCall_1_0; }
		
		//MoveE
		public RuleCall getMoveEParserRuleCall_1_1() { return cMoveEParserRuleCall_1_1; }
		
		//AfterE
		public RuleCall getAfterEParserRuleCall_1_2() { return cAfterEParserRuleCall_1_2; }
	}
	public class BuffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Buff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBuffKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRuleRuleParserRuleCall_2_0 = (RuleCall)cRuleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtraRuleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtraRuleAdditionalBuffRuleParserRuleCall_3_1_0 = (RuleCall)cExtraRuleAssignment_3_1.eContents().get(0);
		
		//Buff:
		//	'buff' name=ID rule=Rule (',' extraRule+=AdditionalBuffRule)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'buff' name=ID rule=Rule (',' extraRule+=AdditionalBuffRule)*
		public Group getGroup() { return cGroup; }
		
		//'buff'
		public Keyword getBuffKeyword_0() { return cBuffKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//rule=Rule
		public Assignment getRuleAssignment_2() { return cRuleAssignment_2; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_2_0() { return cRuleRuleParserRuleCall_2_0; }
		
		//(',' extraRule+=AdditionalBuffRule)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//extraRule+=AdditionalBuffRule
		public Assignment getExtraRuleAssignment_3_1() { return cExtraRuleAssignment_3_1; }
		
		//AdditionalBuffRule
		public RuleCall getExtraRuleAdditionalBuffRuleParserRuleCall_3_1_0() { return cExtraRuleAdditionalBuffRuleParserRuleCall_3_1_0; }
	}
	public class MoveEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.MoveE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRuleRuleParserRuleCall_2_0 = (RuleCall)cRuleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtraRuleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtraRuleAdditionalRuleParserRuleCall_3_1_0 = (RuleCall)cExtraRuleAssignment_3_1.eContents().get(0);
		
		//MoveE:
		//	'move' name=ID rule=Rule (',' extraRule+=AdditionalRule)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'move' name=ID rule=Rule (',' extraRule+=AdditionalRule)*
		public Group getGroup() { return cGroup; }
		
		//'move'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//rule=Rule
		public Assignment getRuleAssignment_2() { return cRuleAssignment_2; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_2_0() { return cRuleRuleParserRuleCall_2_0; }
		
		//(',' extraRule+=AdditionalRule)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//extraRule+=AdditionalRule
		public Assignment getExtraRuleAssignment_3_1() { return cExtraRuleAssignment_3_1; }
		
		//AdditionalRule
		public RuleCall getExtraRuleAdditionalRuleParserRuleCall_3_1_0() { return cExtraRuleAdditionalRuleParserRuleCall_3_1_0; }
	}
	public class AfterEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.AfterE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRuleRuleParserRuleCall_2_0 = (RuleCall)cRuleAssignment_2.eContents().get(0);
		
		//AfterE:
		//	'after' name=ID rule=Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//'after' name=ID rule=Rule
		public Group getGroup() { return cGroup; }
		
		//'after'
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//rule=Rule
		public Assignment getRuleAssignment_2() { return cRuleAssignment_2; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_2_0() { return cRuleRuleParserRuleCall_2_0; }
	}
	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Attributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeAttributeParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		
		//Attributes:
		//	'attributes' attribute+=Attribute+;
		@Override public ParserRule getRule() { return rule; }
		
		//'attributes' attribute+=Attribute+
		public Group getGroup() { return cGroup; }
		
		//'attributes'
		public Keyword getAttributesKeyword_0() { return cAttributesKeyword_0; }
		
		//attribute+=Attribute+
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_1_0() { return cAttributeAttributeParserRuleCall_1_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cModifiedUnmodifiedKeyword_0_0 = (Keyword)cModifiedAssignment_0.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cAValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAValAttributeValuesParserRuleCall_3_0 = (RuleCall)cAValAssignment_3.eContents().get(0);
		
		//Attribute:
		//	modified='unmodified'? 'attribute' name=ID aVal=AttributeValues;
		@Override public ParserRule getRule() { return rule; }
		
		//modified='unmodified'? 'attribute' name=ID aVal=AttributeValues
		public Group getGroup() { return cGroup; }
		
		//modified='unmodified'?
		public Assignment getModifiedAssignment_0() { return cModifiedAssignment_0; }
		
		//'unmodified'
		public Keyword getModifiedUnmodifiedKeyword_0_0() { return cModifiedUnmodifiedKeyword_0_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//aVal=AttributeValues
		public Assignment getAValAssignment_3() { return cAValAssignment_3; }
		
		//AttributeValues
		public RuleCall getAValAttributeValuesParserRuleCall_3_0() { return cAValAttributeValuesParserRuleCall_3_0; }
	}
	public class LocationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Locations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLocAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLocLocParserRuleCall_1_0 = (RuleCall)cLocAssignment_1.eContents().get(0);
		
		//Locations:
		//	'location' loc+=Loc+;
		@Override public ParserRule getRule() { return rule; }
		
		//'location' loc+=Loc+
		public Group getGroup() { return cGroup; }
		
		//'location'
		public Keyword getLocationKeyword_0() { return cLocationKeyword_0; }
		
		//loc+=Loc+
		public Assignment getLocAssignment_1() { return cLocAssignment_1; }
		
		//Loc
		public RuleCall getLocLocParserRuleCall_1_0() { return cLocLocParserRuleCall_1_0; }
	}
	public class LocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Loc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTipeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTipeTypeCrossReference_1_1_0 = (CrossReference)cTipeAssignment_1_1.eContents().get(0);
		private final RuleCall cTipeTypeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTipeTypeCrossReference_1_1_0.eContents().get(1);
		private final Keyword cEffectivenessKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cEffAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEffActualNumbersParserRuleCall_1_3_0 = (RuleCall)cEffAssignment_1_3.eContents().get(0);
		private final Keyword cOpponentsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTeamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTeamTeamCrossReference_3_0 = (CrossReference)cTeamAssignment_3.eContents().get(0);
		private final RuleCall cTeamTeamIDTerminalRuleCall_3_0_1 = (RuleCall)cTeamTeamCrossReference_3_0.eContents().get(1);
		
		//Loc:
		//	name=ID ('type' tipe=[Type] 'effectiveness' eff=ActualNumbers)? 'opponents' team=[Team];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('type' tipe=[Type] 'effectiveness' eff=ActualNumbers)? 'opponents' team=[Team]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('type' tipe=[Type] 'effectiveness' eff=ActualNumbers)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'type'
		public Keyword getTypeKeyword_1_0() { return cTypeKeyword_1_0; }
		
		//tipe=[Type]
		public Assignment getTipeAssignment_1_1() { return cTipeAssignment_1_1; }
		
		//[Type]
		public CrossReference getTipeTypeCrossReference_1_1_0() { return cTipeTypeCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTipeTypeIDTerminalRuleCall_1_1_0_1() { return cTipeTypeIDTerminalRuleCall_1_1_0_1; }
		
		//'effectiveness'
		public Keyword getEffectivenessKeyword_1_2() { return cEffectivenessKeyword_1_2; }
		
		//eff=ActualNumbers
		public Assignment getEffAssignment_1_3() { return cEffAssignment_1_3; }
		
		//ActualNumbers
		public RuleCall getEffActualNumbersParserRuleCall_1_3_0() { return cEffActualNumbersParserRuleCall_1_3_0; }
		
		//'opponents'
		public Keyword getOpponentsKeyword_2() { return cOpponentsKeyword_2; }
		
		//team=[Team]
		public Assignment getTeamAssignment_3() { return cTeamAssignment_3; }
		
		//[Team]
		public CrossReference getTeamTeamCrossReference_3_0() { return cTeamTeamCrossReference_3_0; }
		
		//ID
		public RuleCall getTeamTeamIDTerminalRuleCall_3_0_1() { return cTeamTeamIDTerminalRuleCall_3_0_1; }
	}
	public class RelationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Relations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRelationModifiersParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Relations:
		//	'relations' RelationModifiers? type+=Type+;
		@Override public ParserRule getRule() { return rule; }
		
		//'relations' RelationModifiers? type+=Type+
		public Group getGroup() { return cGroup; }
		
		//'relations'
		public Keyword getRelationsKeyword_0() { return cRelationsKeyword_0; }
		
		//RelationModifiers?
		public RuleCall getRelationModifiersParserRuleCall_1() { return cRelationModifiersParserRuleCall_1; }
		
		//type+=Type+
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class RelationModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.RelationModifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifiersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSynergyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSynAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSynActualNumbersParserRuleCall_2_0 = (RuleCall)cSynAssignment_2.eContents().get(0);
		private final Keyword cEffectiveKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEffAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEffActualNumbersParserRuleCall_4_0 = (RuleCall)cEffAssignment_4.eContents().get(0);
		private final Keyword cIneffectiveKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIneffAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIneffActualNumbersParserRuleCall_6_0 = (RuleCall)cIneffAssignment_6.eContents().get(0);
		
		//RelationModifiers Relations:
		//	'modifiers' 'synergy' syn=ActualNumbers 'effective' eff=ActualNumbers 'ineffective' ineff=ActualNumbers;
		@Override public ParserRule getRule() { return rule; }
		
		//'modifiers' 'synergy' syn=ActualNumbers 'effective' eff=ActualNumbers 'ineffective' ineff=ActualNumbers
		public Group getGroup() { return cGroup; }
		
		//'modifiers'
		public Keyword getModifiersKeyword_0() { return cModifiersKeyword_0; }
		
		//'synergy'
		public Keyword getSynergyKeyword_1() { return cSynergyKeyword_1; }
		
		//syn=ActualNumbers
		public Assignment getSynAssignment_2() { return cSynAssignment_2; }
		
		//ActualNumbers
		public RuleCall getSynActualNumbersParserRuleCall_2_0() { return cSynActualNumbersParserRuleCall_2_0; }
		
		//'effective'
		public Keyword getEffectiveKeyword_3() { return cEffectiveKeyword_3; }
		
		//eff=ActualNumbers
		public Assignment getEffAssignment_4() { return cEffAssignment_4; }
		
		//ActualNumbers
		public RuleCall getEffActualNumbersParserRuleCall_4_0() { return cEffActualNumbersParserRuleCall_4_0; }
		
		//'ineffective'
		public Keyword getIneffectiveKeyword_5() { return cIneffectiveKeyword_5; }
		
		//ineff=ActualNumbers
		public Assignment getIneffAssignment_6() { return cIneffAssignment_6; }
		
		//ActualNumbers
		public RuleCall getIneffActualNumbersParserRuleCall_6_0() { return cIneffActualNumbersParserRuleCall_6_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTExpressionTypeExpressionParserRuleCall_2_0 = (RuleCall)cTExpressionAssignment_2.eContents().get(0);
		
		//Type:
		//	'type' name=ID tExpression=TypeExpression?;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ID tExpression=TypeExpression?
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//tExpression=TypeExpression?
		public Assignment getTExpressionAssignment_2() { return cTExpressionAssignment_2; }
		
		//TypeExpression
		public RuleCall getTExpressionTypeExpressionParserRuleCall_2_0() { return cTExpressionTypeExpressionParserRuleCall_2_0; }
	}
	public class TypeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.TypeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStrongAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cStrongTypeCrossReference_0_0 = (CrossReference)cStrongAssignment_0.eContents().get(0);
		private final RuleCall cStrongTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cStrongTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStrong2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cStrong2TypeCrossReference_1_1_0 = (CrossReference)cStrong2Assignment_1_1.eContents().get(0);
		private final RuleCall cStrong2TypeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cStrong2TypeCrossReference_1_1_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCurrentTAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCurrentTTypeCrossReference_3_0 = (CrossReference)cCurrentTAssignment_3.eContents().get(0);
		private final RuleCall cCurrentTTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cCurrentTTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cWeakAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cWeakTypeCrossReference_5_0 = (CrossReference)cWeakAssignment_5.eContents().get(0);
		private final RuleCall cWeakTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cWeakTypeCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cWeak2Assignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cWeak2TypeCrossReference_6_1_0 = (CrossReference)cWeak2Assignment_6_1.eContents().get(0);
		private final RuleCall cWeak2TypeIDTerminalRuleCall_6_1_0_1 = (RuleCall)cWeak2TypeCrossReference_6_1_0.eContents().get(1);
		
		//TypeExpression:
		//	strong=[Type] (',' strong2+=[Type])* '<' currentT=[Type] '<' weak=[Type] (',' weak2+=[Type])*;
		@Override public ParserRule getRule() { return rule; }
		
		//strong=[Type] (',' strong2+=[Type])* '<' currentT=[Type] '<' weak=[Type] (',' weak2+=[Type])*
		public Group getGroup() { return cGroup; }
		
		//strong=[Type]
		public Assignment getStrongAssignment_0() { return cStrongAssignment_0; }
		
		//[Type]
		public CrossReference getStrongTypeCrossReference_0_0() { return cStrongTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getStrongTypeIDTerminalRuleCall_0_0_1() { return cStrongTypeIDTerminalRuleCall_0_0_1; }
		
		//(',' strong2+=[Type])*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//strong2+=[Type]
		public Assignment getStrong2Assignment_1_1() { return cStrong2Assignment_1_1; }
		
		//[Type]
		public CrossReference getStrong2TypeCrossReference_1_1_0() { return cStrong2TypeCrossReference_1_1_0; }
		
		//ID
		public RuleCall getStrong2TypeIDTerminalRuleCall_1_1_0_1() { return cStrong2TypeIDTerminalRuleCall_1_1_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//currentT=[Type]
		public Assignment getCurrentTAssignment_3() { return cCurrentTAssignment_3; }
		
		//[Type]
		public CrossReference getCurrentTTypeCrossReference_3_0() { return cCurrentTTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getCurrentTTypeIDTerminalRuleCall_3_0_1() { return cCurrentTTypeIDTerminalRuleCall_3_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }
		
		//weak=[Type]
		public Assignment getWeakAssignment_5() { return cWeakAssignment_5; }
		
		//[Type]
		public CrossReference getWeakTypeCrossReference_5_0() { return cWeakTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getWeakTypeIDTerminalRuleCall_5_0_1() { return cWeakTypeIDTerminalRuleCall_5_0_1; }
		
		//(',' weak2+=[Type])*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//weak2+=[Type]
		public Assignment getWeak2Assignment_6_1() { return cWeak2Assignment_6_1; }
		
		//[Type]
		public CrossReference getWeak2TypeCrossReference_6_1_0() { return cWeak2TypeCrossReference_6_1_0; }
		
		//ID
		public RuleCall getWeak2TypeIDTerminalRuleCall_6_1_0_1() { return cWeak2TypeIDTerminalRuleCall_6_1_0_1; }
	}
	public class MovesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Moves");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMovesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMoveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMoveMoveParserRuleCall_1_0 = (RuleCall)cMoveAssignment_1.eContents().get(0);
		
		//Moves:
		//	'moves' move+=Move+;
		@Override public ParserRule getRule() { return rule; }
		
		//'moves' move+=Move+
		public Group getGroup() { return cGroup; }
		
		//'moves'
		public Keyword getMovesKeyword_0() { return cMovesKeyword_0; }
		
		//move+=Move+
		public Assignment getMoveAssignment_1() { return cMoveAssignment_1; }
		
		//Move
		public RuleCall getMoveMoveParserRuleCall_1_0() { return cMoveMoveParserRuleCall_1_0; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cETypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cETypeETypeParserRuleCall_2_0 = (RuleCall)cETypeAssignment_2.eContents().get(0);
		private final Assignment cAttAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttAltAttributeParserRuleCall_3_0 = (RuleCall)cAttAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cMEffectAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cMEffectMEffectParserRuleCall_4_0_0 = (RuleCall)cMEffectAssignment_4_0.eContents().get(0);
		private final Assignment cBEffectAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cBEffectBEffectParserRuleCall_4_1_0 = (RuleCall)cBEffectAssignment_4_1.eContents().get(0);
		private final Assignment cAEffectAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cAEffectAEffectParserRuleCall_4_2_0 = (RuleCall)cAEffectAssignment_4_2.eContents().get(0);
		
		//Move:
		//	'move' name=ID eType=EType att+=AltAttribute* (mEffect+=MEffect | bEffect+=BEffect | aEffect+=AEffect)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'move' name=ID eType=EType att+=AltAttribute* (mEffect+=MEffect | bEffect+=BEffect | aEffect+=AEffect)*
		public Group getGroup() { return cGroup; }
		
		//'move'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//eType=EType
		public Assignment getETypeAssignment_2() { return cETypeAssignment_2; }
		
		//EType
		public RuleCall getETypeETypeParserRuleCall_2_0() { return cETypeETypeParserRuleCall_2_0; }
		
		//att+=AltAttribute*
		public Assignment getAttAssignment_3() { return cAttAssignment_3; }
		
		//AltAttribute
		public RuleCall getAttAltAttributeParserRuleCall_3_0() { return cAttAltAttributeParserRuleCall_3_0; }
		
		//(mEffect+=MEffect | bEffect+=BEffect | aEffect+=AEffect)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//mEffect+=MEffect
		public Assignment getMEffectAssignment_4_0() { return cMEffectAssignment_4_0; }
		
		//MEffect
		public RuleCall getMEffectMEffectParserRuleCall_4_0_0() { return cMEffectMEffectParserRuleCall_4_0_0; }
		
		//bEffect+=BEffect
		public Assignment getBEffectAssignment_4_1() { return cBEffectAssignment_4_1; }
		
		//BEffect
		public RuleCall getBEffectBEffectParserRuleCall_4_1_0() { return cBEffectBEffectParserRuleCall_4_1_0; }
		
		//aEffect+=AEffect
		public Assignment getAEffectAssignment_4_2() { return cAEffectAssignment_4_2; }
		
		//AEffect
		public RuleCall getAEffectAEffectParserRuleCall_4_2_0() { return cAEffectAEffectParserRuleCall_4_2_0; }
	}
	public class MEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.MEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMoveENameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMoveENameMoveECrossReference_2_0 = (CrossReference)cMoveENameAssignment_2.eContents().get(0);
		private final RuleCall cMoveENameMoveEIDTerminalRuleCall_2_0_1 = (RuleCall)cMoveENameMoveECrossReference_2_0.eContents().get(1);
		
		//MEffect:
		//	'effect' 'move' moveEName=[MoveE];
		@Override public ParserRule getRule() { return rule; }
		
		//'effect' 'move' moveEName=[MoveE]
		public Group getGroup() { return cGroup; }
		
		//'effect'
		public Keyword getEffectKeyword_0() { return cEffectKeyword_0; }
		
		//'move'
		public Keyword getMoveKeyword_1() { return cMoveKeyword_1; }
		
		//moveEName=[MoveE]
		public Assignment getMoveENameAssignment_2() { return cMoveENameAssignment_2; }
		
		//[MoveE]
		public CrossReference getMoveENameMoveECrossReference_2_0() { return cMoveENameMoveECrossReference_2_0; }
		
		//ID
		public RuleCall getMoveENameMoveEIDTerminalRuleCall_2_0_1() { return cMoveENameMoveEIDTerminalRuleCall_2_0_1; }
	}
	public class BEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.BEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBuffKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBuffENameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cBuffENameBuffCrossReference_2_0 = (CrossReference)cBuffENameAssignment_2.eContents().get(0);
		private final RuleCall cBuffENameBuffIDTerminalRuleCall_2_0_1 = (RuleCall)cBuffENameBuffCrossReference_2_0.eContents().get(1);
		
		//BEffect:
		//	'effect' 'buff' buffEName=[Buff];
		@Override public ParserRule getRule() { return rule; }
		
		//'effect' 'buff' buffEName=[Buff]
		public Group getGroup() { return cGroup; }
		
		//'effect'
		public Keyword getEffectKeyword_0() { return cEffectKeyword_0; }
		
		//'buff'
		public Keyword getBuffKeyword_1() { return cBuffKeyword_1; }
		
		//buffEName=[Buff]
		public Assignment getBuffENameAssignment_2() { return cBuffENameAssignment_2; }
		
		//[Buff]
		public CrossReference getBuffENameBuffCrossReference_2_0() { return cBuffENameBuffCrossReference_2_0; }
		
		//ID
		public RuleCall getBuffENameBuffIDTerminalRuleCall_2_0_1() { return cBuffENameBuffIDTerminalRuleCall_2_0_1; }
	}
	public class AEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.AEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAfterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAfterENameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAfterENameAfterECrossReference_2_0 = (CrossReference)cAfterENameAssignment_2.eContents().get(0);
		private final RuleCall cAfterENameAfterEIDTerminalRuleCall_2_0_1 = (RuleCall)cAfterENameAfterECrossReference_2_0.eContents().get(1);
		
		//AEffect:
		//	'effect' 'after' afterEName=[AfterE];
		@Override public ParserRule getRule() { return rule; }
		
		//'effect' 'after' afterEName=[AfterE]
		public Group getGroup() { return cGroup; }
		
		//'effect'
		public Keyword getEffectKeyword_0() { return cEffectKeyword_0; }
		
		//'after'
		public Keyword getAfterKeyword_1() { return cAfterKeyword_1; }
		
		//afterEName=[AfterE]
		public Assignment getAfterENameAssignment_2() { return cAfterENameAssignment_2; }
		
		//[AfterE]
		public CrossReference getAfterENameAfterECrossReference_2_0() { return cAfterENameAfterECrossReference_2_0; }
		
		//ID
		public RuleCall getAfterENameAfterEIDTerminalRuleCall_2_0_1() { return cAfterENameAfterEIDTerminalRuleCall_2_0_1; }
	}
	public class ETypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.EType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		
		//EType:
		//	'type' type=[Type];
		@Override public ParserRule getRule() { return rule; }
		
		//'type' type=[Type]
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//type=[Type]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_0_1; }
	}
	public class AttributeValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.AttributeValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLTypesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLTypesLegalTypeParserRuleCall_1_0_0 = (RuleCall)cLTypesAssignment_1_0.eContents().get(0);
		private final Assignment cAnAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cAnActualNumbersParserRuleCall_1_1_0 = (RuleCall)cAnAssignment_1_1.eContents().get(0);
		
		//AttributeValues:
		//	'is' (lTypes=LegalType | an=ActualNumbers);
		@Override public ParserRule getRule() { return rule; }
		
		//'is' (lTypes=LegalType | an=ActualNumbers)
		public Group getGroup() { return cGroup; }
		
		//'is'
		public Keyword getIsKeyword_0() { return cIsKeyword_0; }
		
		//(lTypes=LegalType | an=ActualNumbers)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//lTypes=LegalType
		public Assignment getLTypesAssignment_1_0() { return cLTypesAssignment_1_0; }
		
		//LegalType
		public RuleCall getLTypesLegalTypeParserRuleCall_1_0_0() { return cLTypesLegalTypeParserRuleCall_1_0_0; }
		
		//an=ActualNumbers
		public Assignment getAnAssignment_1_1() { return cAnAssignment_1_1; }
		
		//ActualNumbers
		public RuleCall getAnActualNumbersParserRuleCall_1_1_0() { return cAnActualNumbersParserRuleCall_1_1_0; }
	}
	public class AltAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.AltAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAttributeAttributeCrossReference_1_0 = (CrossReference)cAttributeAssignment_1.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cAttributeAttributeCrossReference_1_0.eContents().get(1);
		private final Assignment cAvAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAvAttributeValuesParserRuleCall_2_0 = (RuleCall)cAvAssignment_2.eContents().get(0);
		
		//AltAttribute:
		//	'attribute' attribute=[Attribute] av=AttributeValues?;
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' attribute=[Attribute] av=AttributeValues?
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//attribute=[Attribute]
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_1_0() { return cAttributeAttributeCrossReference_1_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_1_0_1() { return cAttributeAttributeIDTerminalRuleCall_1_0_1; }
		
		//av=AttributeValues?
		public Assignment getAvAssignment_2() { return cAvAssignment_2; }
		
		//AttributeValues
		public RuleCall getAvAttributeValuesParserRuleCall_2_0() { return cAvAttributeValuesParserRuleCall_2_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cOrAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOrORconditionParserRuleCall_0_1_0 = (RuleCall)cOrAssignment_0_1.eContents().get(0);
		private final Keyword cThenKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetAttributeCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetAttributeCrossReference_1_0.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSumAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSumSumParserRuleCall_3_0 = (RuleCall)cSumAssignment_3.eContents().get(0);
		
		//Rule:
		//	('if' or=ORcondition 'then')? target=[Attribute] 'is' sum=Sum;
		@Override public ParserRule getRule() { return rule; }
		
		//('if' or=ORcondition 'then')? target=[Attribute] 'is' sum=Sum
		public Group getGroup() { return cGroup; }
		
		//('if' or=ORcondition 'then')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'if'
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }
		
		//or=ORcondition
		public Assignment getOrAssignment_0_1() { return cOrAssignment_0_1; }
		
		//ORcondition
		public RuleCall getOrORconditionParserRuleCall_0_1_0() { return cOrORconditionParserRuleCall_0_1_0; }
		
		//'then'
		public Keyword getThenKeyword_0_2() { return cThenKeyword_0_2; }
		
		//target=[Attribute]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[Attribute]
		public CrossReference getTargetAttributeCrossReference_1_0() { return cTargetAttributeCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetAttributeIDTerminalRuleCall_1_0_1() { return cTargetAttributeIDTerminalRuleCall_1_0_1; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//sum=Sum
		public Assignment getSumAssignment_3() { return cSumAssignment_3; }
		
		//Sum
		public RuleCall getSumSumParserRuleCall_3_0() { return cSumSumParserRuleCall_3_0; }
	}
	public class AdditionalRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.AdditionalRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetAttributeCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSumAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSumSumParserRuleCall_2_0 = (RuleCall)cSumAssignment_2.eContents().get(0);
		private final Keyword cHitsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cHitsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final Keyword cHitsUserKeyword_4_0_0 = (Keyword)cHitsAssignment_4_0.eContents().get(0);
		private final Assignment cHitsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Keyword cHitsEnemyKeyword_4_1_0 = (Keyword)cHitsAssignment_4_1.eContents().get(0);
		
		//AdditionalRule Rule:
		//	target=[Attribute] 'is' sum=Sum 'hits' (hits='user' | hits='enemy');
		@Override public ParserRule getRule() { return rule; }
		
		//target=[Attribute] 'is' sum=Sum 'hits' (hits='user' | hits='enemy')
		public Group getGroup() { return cGroup; }
		
		//target=[Attribute]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//[Attribute]
		public CrossReference getTargetAttributeCrossReference_0_0() { return cTargetAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getTargetAttributeIDTerminalRuleCall_0_0_1() { return cTargetAttributeIDTerminalRuleCall_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//sum=Sum
		public Assignment getSumAssignment_2() { return cSumAssignment_2; }
		
		//Sum
		public RuleCall getSumSumParserRuleCall_2_0() { return cSumSumParserRuleCall_2_0; }
		
		//'hits'
		public Keyword getHitsKeyword_3() { return cHitsKeyword_3; }
		
		//(hits='user' | hits='enemy')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//hits='user'
		public Assignment getHitsAssignment_4_0() { return cHitsAssignment_4_0; }
		
		//'user'
		public Keyword getHitsUserKeyword_4_0_0() { return cHitsUserKeyword_4_0_0; }
		
		//hits='enemy'
		public Assignment getHitsAssignment_4_1() { return cHitsAssignment_4_1; }
		
		//'enemy'
		public Keyword getHitsEnemyKeyword_4_1_0() { return cHitsEnemyKeyword_4_1_0; }
	}
	public class AdditionalBuffRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.AdditionalBuffRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetAttributeCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSumAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSumSumParserRuleCall_2_0 = (RuleCall)cSumAssignment_2.eContents().get(0);
		
		//AdditionalBuffRule Rule:
		//	target=[Attribute] 'is' sum=Sum;
		@Override public ParserRule getRule() { return rule; }
		
		//target=[Attribute] 'is' sum=Sum
		public Group getGroup() { return cGroup; }
		
		//target=[Attribute]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//[Attribute]
		public CrossReference getTargetAttributeCrossReference_0_0() { return cTargetAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getTargetAttributeIDTerminalRuleCall_0_0_1() { return cTargetAttributeIDTerminalRuleCall_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//sum=Sum
		public Assignment getSumAssignment_2() { return cSumAssignment_2; }
		
		//Sum
		public RuleCall getSumSumParserRuleCall_2_0() { return cSumSumParserRuleCall_2_0; }
	}
	public class EntitiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Entities");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntitiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntityEntityParserRuleCall_1_0 = (RuleCall)cEntityAssignment_1.eContents().get(0);
		
		//Entities:
		//	'entities' entity+=Entity+;
		@Override public ParserRule getRule() { return rule; }
		
		//'entities' entity+=Entity+
		public Group getGroup() { return cGroup; }
		
		//'entities'
		public Keyword getEntitiesKeyword_0() { return cEntitiesKeyword_0; }
		
		//entity+=Entity+
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//Entity
		public RuleCall getEntityEntityParserRuleCall_1_0() { return cEntityEntityParserRuleCall_1_0; }
	}
	public class DeathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Death");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReqRequireParserRuleCall_1_0 = (RuleCall)cReqAssignment_1.eContents().get(0);
		
		//Death:
		//	'death' req=Require;
		@Override public ParserRule getRule() { return rule; }
		
		//'death' req=Require
		public Group getGroup() { return cGroup; }
		
		//'death'
		public Keyword getDeathKeyword_0() { return cDeathKeyword_0; }
		
		//req=Require
		public Assignment getReqAssignment_1() { return cReqAssignment_1; }
		
		//Require
		public RuleCall getReqRequireParserRuleCall_1_0() { return cReqRequireParserRuleCall_1_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendEntityCrossReference_2_1_0 = (CrossReference)cExtendAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cExtendEntityCrossReference_2_1_0.eContents().get(1);
		private final Assignment cETypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cETypeETypeParserRuleCall_3_0 = (RuleCall)cETypeAssignment_3.eContents().get(0);
		private final Assignment cAttAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttAltAttributeParserRuleCall_4_0 = (RuleCall)cAttAssignment_4.eContents().get(0);
		private final Assignment cEMovesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEMovesEntityMovesParserRuleCall_5_0 = (RuleCall)cEMovesAssignment_5.eContents().get(0);
		
		//Entity:
		//	'entity' name=ID ('extends' extend=[Entity])? eType=EType att+=AltAttribute* eMoves=EntityMoves;
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID ('extends' extend=[Entity])? eType=EType att+=AltAttribute* eMoves=EntityMoves
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' extend=[Entity])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//extend=[Entity]
		public Assignment getExtendAssignment_2_1() { return cExtendAssignment_2_1; }
		
		//[Entity]
		public CrossReference getExtendEntityCrossReference_2_1_0() { return cExtendEntityCrossReference_2_1_0; }
		
		//ID
		public RuleCall getExtendEntityIDTerminalRuleCall_2_1_0_1() { return cExtendEntityIDTerminalRuleCall_2_1_0_1; }
		
		//eType=EType
		public Assignment getETypeAssignment_3() { return cETypeAssignment_3; }
		
		//EType
		public RuleCall getETypeETypeParserRuleCall_3_0() { return cETypeETypeParserRuleCall_3_0; }
		
		//att+=AltAttribute*
		public Assignment getAttAssignment_4() { return cAttAssignment_4; }
		
		//AltAttribute
		public RuleCall getAttAltAttributeParserRuleCall_4_0() { return cAttAltAttributeParserRuleCall_4_0; }
		
		//eMoves=EntityMoves
		public Assignment getEMovesAssignment_5() { return cEMovesAssignment_5; }
		
		//EntityMoves
		public RuleCall getEMovesEntityMovesParserRuleCall_5_0() { return cEMovesEntityMovesParserRuleCall_5_0; }
	}
	public class EntityMovesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.EntityMoves");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMoveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMoveMoveCrossReference_1_0 = (CrossReference)cMoveAssignment_1.eContents().get(0);
		private final RuleCall cMoveMoveIDTerminalRuleCall_1_0_1 = (RuleCall)cMoveMoveCrossReference_1_0.eContents().get(1);
		
		//EntityMoves:
		//	'move' move+=[Move]+;
		@Override public ParserRule getRule() { return rule; }
		
		//'move' move+=[Move]+
		public Group getGroup() { return cGroup; }
		
		//'move'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//move+=[Move]+
		public Assignment getMoveAssignment_1() { return cMoveAssignment_1; }
		
		//[Move]
		public CrossReference getMoveMoveCrossReference_1_0() { return cMoveMoveCrossReference_1_0; }
		
		//ID
		public RuleCall getMoveMoveIDTerminalRuleCall_1_0_1() { return cMoveMoveIDTerminalRuleCall_1_0_1; }
	}
	public class TeamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Teams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTeamsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTeamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTeamTeamParserRuleCall_1_0 = (RuleCall)cTeamAssignment_1.eContents().get(0);
		
		//Teams:
		//	'teams' team+=Team+;
		@Override public ParserRule getRule() { return rule; }
		
		//'teams' team+=Team+
		public Group getGroup() { return cGroup; }
		
		//'teams'
		public Keyword getTeamsKeyword_0() { return cTeamsKeyword_0; }
		
		//team+=Team+
		public Assignment getTeamAssignment_1() { return cTeamAssignment_1; }
		
		//Team
		public RuleCall getTeamTeamParserRuleCall_1_0() { return cTeamTeamParserRuleCall_1_0; }
	}
	public class TeamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Team");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTeamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMembersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMembersMembersParserRuleCall_2_0 = (RuleCall)cMembersAssignment_2.eContents().get(0);
		
		//Team:
		//	'team' name=ID members=Members;
		@Override public ParserRule getRule() { return rule; }
		
		//'team' name=ID members=Members
		public Group getGroup() { return cGroup; }
		
		//'team'
		public Keyword getTeamKeyword_0() { return cTeamKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//members=Members
		public Assignment getMembersAssignment_2() { return cMembersAssignment_2; }
		
		//Members
		public RuleCall getMembersMembersParserRuleCall_2_0() { return cMembersMembersParserRuleCall_2_0; }
	}
	public class MembersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Members");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMembersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_1_0 = (CrossReference)cEntityAssignment_1.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cEntityEntityCrossReference_1_0.eContents().get(1);
		
		//Members:
		//	'members' entity+=[Entity]+;
		@Override public ParserRule getRule() { return rule; }
		
		//'members' entity+=[Entity]+
		public Group getGroup() { return cGroup; }
		
		//'members'
		public Keyword getMembersKeyword_0() { return cMembersKeyword_0; }
		
		//entity+=[Entity]+
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_1_0() { return cEntityEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_1_0_1() { return cEntityEntityIDTerminalRuleCall_1_0_1; }
	}
	public class RequireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Require");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLogAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogORconditionParserRuleCall_1_0 = (RuleCall)cLogAssignment_1.eContents().get(0);
		
		//Require:
		//	'require' log=ORcondition;
		@Override public ParserRule getRule() { return rule; }
		
		//'require' log=ORcondition
		public Group getGroup() { return cGroup; }
		
		//'require'
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }
		
		//log=ORcondition
		public Assignment getLogAssignment_1() { return cLogAssignment_1; }
		
		//ORcondition
		public RuleCall getLogORconditionParserRuleCall_1_0() { return cLogORconditionParserRuleCall_1_0; }
	}
	public class ORconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.ORcondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cANDconditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cORKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cOrLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightANDconditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ORcondition Proposition:
		//	ANDcondition ('OR' {Or.left=current} right=ANDcondition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ANDcondition ('OR' {Or.left=current} right=ANDcondition)*
		public Group getGroup() { return cGroup; }
		
		//ANDcondition
		public RuleCall getANDconditionParserRuleCall_0() { return cANDconditionParserRuleCall_0; }
		
		//('OR' {Or.left=current} right=ANDcondition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'OR'
		public Keyword getORKeyword_1_0() { return cORKeyword_1_0; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_1() { return cOrLeftAction_1_1; }
		
		//right=ANDcondition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ANDcondition
		public RuleCall getRightANDconditionParserRuleCall_1_2_0() { return cRightANDconditionParserRuleCall_1_2_0; }
	}
	public class ANDconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.ANDcondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cANDKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cAndLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightStatementParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ANDcondition Proposition:
		//	Statement ('AND' {And.left=current} right=Statement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Statement ('AND' {And.left=current} right=Statement)*
		public Group getGroup() { return cGroup; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//('AND' {And.left=current} right=Statement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'AND'
		public Keyword getANDKeyword_1_0() { return cANDKeyword_1_0; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_1() { return cAndLeftAction_1_1; }
		
		//right=Statement
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Statement
		public RuleCall getRightStatementParserRuleCall_1_2_0() { return cRightStatementParserRuleCall_1_2_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberComparingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cORconditionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Statement Proposition:
		//	NumberComparing | '(' ORcondition ')';
		@Override public ParserRule getRule() { return rule; }
		
		//NumberComparing | '(' ORcondition ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberComparing
		public RuleCall getNumberComparingParserRuleCall_0() { return cNumberComparingParserRuleCall_0; }
		
		//'(' ORcondition ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//ORcondition
		public RuleCall getORconditionParserRuleCall_1_1() { return cORconditionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class NumberComparingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.NumberComparing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftSumParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cCompAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompComparatorParserRuleCall_1_0 = (RuleCall)cCompAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightSumParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//NumberComparing:
		//	left=Sum comp=Comparator right=Sum;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Sum comp=Comparator right=Sum
		public Group getGroup() { return cGroup; }
		
		//left=Sum
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Sum
		public RuleCall getLeftSumParserRuleCall_0_0() { return cLeftSumParserRuleCall_0_0; }
		
		//comp=Comparator
		public Assignment getCompAssignment_1() { return cCompAssignment_1; }
		
		//Comparator
		public RuleCall getCompComparatorParserRuleCall_1_0() { return cCompComparatorParserRuleCall_1_0; }
		
		//right=Sum
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Sum
		public RuleCall getRightSumParserRuleCall_2_0() { return cRightSumParserRuleCall_2_0; }
	}
	public class ComparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Comparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSmallerAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSmallerEqAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cEqAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBiggerEqAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBiggerAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNEqAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		
		//Comparator:
		//	{Smaller} '<' | {SmallerEq} '<=' | {Eq} '==' | {BiggerEq} '>=' | {Bigger} '>' | {NEq} '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//{Smaller} '<' | {SmallerEq} '<=' | {Eq} '==' | {BiggerEq} '>=' | {Bigger} '>' | {NEq} '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Smaller} '<'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Smaller}
		public Action getSmallerAction_0_0() { return cSmallerAction_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_1() { return cLessThanSignKeyword_0_1; }
		
		//{SmallerEq} '<='
		public Group getGroup_1() { return cGroup_1; }
		
		//{SmallerEq}
		public Action getSmallerEqAction_1_0() { return cSmallerEqAction_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_1() { return cLessThanSignEqualsSignKeyword_1_1; }
		
		//{Eq} '=='
		public Group getGroup_2() { return cGroup_2; }
		
		//{Eq}
		public Action getEqAction_2_0() { return cEqAction_2_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2_1() { return cEqualsSignEqualsSignKeyword_2_1; }
		
		//{BiggerEq} '>='
		public Group getGroup_3() { return cGroup_3; }
		
		//{BiggerEq}
		public Action getBiggerEqAction_3_0() { return cBiggerEqAction_3_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3_1() { return cGreaterThanSignEqualsSignKeyword_3_1; }
		
		//{Bigger} '>'
		public Group getGroup_4() { return cGroup_4; }
		
		//{Bigger}
		public Action getBiggerAction_4_0() { return cBiggerAction_4_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4_1() { return cGreaterThanSignKeyword_4_1; }
		
		//{NEq} '!='
		public Group getGroup_5() { return cGroup_5; }
		
		//{NEq}
		public Action getNEqAction_5_0() { return cNEqAction_5_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_5_1() { return cExclamationMarkEqualsSignKeyword_5_1; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cAddLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cSubLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplyParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Sum:
		//	Multiply (('+' {Add.left=current} | '-' {Sub.left=current}) right=Multiply)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiply (('+' {Add.left=current} | '-' {Sub.left=current}) right=Multiply)*
		public Group getGroup() { return cGroup; }
		
		//Multiply
		public RuleCall getMultiplyParserRuleCall_0() { return cMultiplyParserRuleCall_0; }
		
		//(('+' {Add.left=current} | '-' {Sub.left=current}) right=Multiply)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('+' {Add.left=current} | '-' {Sub.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+' {Add.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0() { return cPlusSignKeyword_1_0_0_0; }
		
		//{Add.left=current}
		public Action getAddLeftAction_1_0_0_1() { return cAddLeftAction_1_0_0_1; }
		
		//'-' {Sub.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_0() { return cHyphenMinusKeyword_1_0_1_0; }
		
		//{Sub.left=current}
		public Action getSubLeftAction_1_0_1_1() { return cSubLeftAction_1_0_1_1; }
		
		//right=Multiply
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiply
		public RuleCall getRightMultiplyParserRuleCall_1_1_0() { return cRightMultiplyParserRuleCall_1_1_0; }
	}
	public class MultiplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.Multiply");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicNumberParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cMultLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cDivLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAtomicNumberParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiply:
		//	AtomicNumber (('*' {Mult.left=current} | '/' {Div.left=current}) right=AtomicNumber)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomicNumber (('*' {Mult.left=current} | '/' {Div.left=current}) right=AtomicNumber)*
		public Group getGroup() { return cGroup; }
		
		//AtomicNumber
		public RuleCall getAtomicNumberParserRuleCall_0() { return cAtomicNumberParserRuleCall_0; }
		
		//(('*' {Mult.left=current} | '/' {Div.left=current}) right=AtomicNumber)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('*' {Mult.left=current} | '/' {Div.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'*' {Mult.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_0() { return cAsteriskKeyword_1_0_0_0; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_0_1() { return cMultLeftAction_1_0_0_1; }
		
		//'/' {Div.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_0() { return cSolidusKeyword_1_0_1_0; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_1() { return cDivLeftAction_1_0_1_1; }
		
		//right=AtomicNumber
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AtomicNumber
		public RuleCall getRightAtomicNumberParserRuleCall_1_1_0() { return cRightAtomicNumberParserRuleCall_1_1_0; }
	}
	public class AtomicNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.AtomicNumber");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActualNumbersParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNameAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AtomicNumber:
		//	ActualNumbers | NameAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//ActualNumbers | NameAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActualNumbers
		public RuleCall getActualNumbersParserRuleCall_0() { return cActualNumbersParserRuleCall_0; }
		
		//NameAttribute
		public RuleCall getNameAttributeParserRuleCall_1() { return cNameAttributeParserRuleCall_1; }
	}
	public class ActualNumbersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.ActualNumbers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatNumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntNumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ActualNumbers:
		//	FloatNum | IntNum;
		@Override public ParserRule getRule() { return rule; }
		
		//FloatNum | IntNum
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FloatNum
		public RuleCall getFloatNumParserRuleCall_0() { return cFloatNumParserRuleCall_0; }
		
		//IntNum
		public RuleCall getIntNumParserRuleCall_1() { return cIntNumParserRuleCall_1; }
	}
	public class NameAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.NameAttribute");
		private final Assignment cAttributeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cAttributeAttributeCrossReference_0 = (CrossReference)cAttributeAssignment.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_0_1 = (RuleCall)cAttributeAttributeCrossReference_0.eContents().get(1);
		
		//NameAttribute:
		//	attribute=[Attribute];
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=[Attribute]
		public Assignment getAttributeAssignment() { return cAttributeAssignment; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_0() { return cAttributeAttributeCrossReference_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_0_1() { return cAttributeAttributeIDTerminalRuleCall_0_1; }
	}
	public class IntNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.IntNum");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntNum:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class FloatNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.FloatNum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIINTTerminalRuleCall_0_0 = (RuleCall)cIAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDecimalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDecimalINTTerminalRuleCall_2_0 = (RuleCall)cDecimalAssignment_2.eContents().get(0);
		
		//FloatNum:
		//	i=INT '.' decimal=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//i=INT '.' decimal=INT
		public Group getGroup() { return cGroup; }
		
		//i=INT
		public Assignment getIAssignment_0() { return cIAssignment_0; }
		
		//INT
		public RuleCall getIINTTerminalRuleCall_0_0() { return cIINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//decimal=INT
		public Assignment getDecimalAssignment_2() { return cDecimalAssignment_2; }
		
		//INT
		public RuleCall getDecimalINTTerminalRuleCall_2_0() { return cDecimalINTTerminalRuleCall_2_0; }
	}
	public class LegalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mdsd.RPG.LegalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFloatKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//LegalType:
		//	'Float' | 'Integer';
		@Override public ParserRule getRule() { return rule; }
		
		//'Float' | 'Integer'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Float'
		public Keyword getFloatKeyword_0() { return cFloatKeyword_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
	}
	
	
	private final SystemRPGElements pSystemRPG;
	private final DeclarationElements pDeclaration;
	private final EffectsElements pEffects;
	private final EffectElements pEffect;
	private final BuffElements pBuff;
	private final MoveEElements pMoveE;
	private final AfterEElements pAfterE;
	private final AttributesElements pAttributes;
	private final AttributeElements pAttribute;
	private final LocationsElements pLocations;
	private final LocElements pLoc;
	private final RelationsElements pRelations;
	private final RelationModifiersElements pRelationModifiers;
	private final TypeElements pType;
	private final TypeExpressionElements pTypeExpression;
	private final MovesElements pMoves;
	private final MoveElements pMove;
	private final MEffectElements pMEffect;
	private final BEffectElements pBEffect;
	private final AEffectElements pAEffect;
	private final ETypeElements pEType;
	private final AttributeValuesElements pAttributeValues;
	private final AltAttributeElements pAltAttribute;
	private final RuleElements pRule;
	private final AdditionalRuleElements pAdditionalRule;
	private final AdditionalBuffRuleElements pAdditionalBuffRule;
	private final EntitiesElements pEntities;
	private final DeathElements pDeath;
	private final EntityElements pEntity;
	private final EntityMovesElements pEntityMoves;
	private final TeamsElements pTeams;
	private final TeamElements pTeam;
	private final MembersElements pMembers;
	private final RequireElements pRequire;
	private final ORconditionElements pORcondition;
	private final ANDconditionElements pANDcondition;
	private final StatementElements pStatement;
	private final NumberComparingElements pNumberComparing;
	private final ComparatorElements pComparator;
	private final SumElements pSum;
	private final MultiplyElements pMultiply;
	private final AtomicNumberElements pAtomicNumber;
	private final ActualNumbersElements pActualNumbers;
	private final NameAttributeElements pNameAttribute;
	private final IntNumElements pIntNum;
	private final FloatNumElements pFloatNum;
	private final LegalTypeElements pLegalType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RPGGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystemRPG = new SystemRPGElements();
		this.pDeclaration = new DeclarationElements();
		this.pEffects = new EffectsElements();
		this.pEffect = new EffectElements();
		this.pBuff = new BuffElements();
		this.pMoveE = new MoveEElements();
		this.pAfterE = new AfterEElements();
		this.pAttributes = new AttributesElements();
		this.pAttribute = new AttributeElements();
		this.pLocations = new LocationsElements();
		this.pLoc = new LocElements();
		this.pRelations = new RelationsElements();
		this.pRelationModifiers = new RelationModifiersElements();
		this.pType = new TypeElements();
		this.pTypeExpression = new TypeExpressionElements();
		this.pMoves = new MovesElements();
		this.pMove = new MoveElements();
		this.pMEffect = new MEffectElements();
		this.pBEffect = new BEffectElements();
		this.pAEffect = new AEffectElements();
		this.pEType = new ETypeElements();
		this.pAttributeValues = new AttributeValuesElements();
		this.pAltAttribute = new AltAttributeElements();
		this.pRule = new RuleElements();
		this.pAdditionalRule = new AdditionalRuleElements();
		this.pAdditionalBuffRule = new AdditionalBuffRuleElements();
		this.pEntities = new EntitiesElements();
		this.pDeath = new DeathElements();
		this.pEntity = new EntityElements();
		this.pEntityMoves = new EntityMovesElements();
		this.pTeams = new TeamsElements();
		this.pTeam = new TeamElements();
		this.pMembers = new MembersElements();
		this.pRequire = new RequireElements();
		this.pORcondition = new ORconditionElements();
		this.pANDcondition = new ANDconditionElements();
		this.pStatement = new StatementElements();
		this.pNumberComparing = new NumberComparingElements();
		this.pComparator = new ComparatorElements();
		this.pSum = new SumElements();
		this.pMultiply = new MultiplyElements();
		this.pAtomicNumber = new AtomicNumberElements();
		this.pActualNumbers = new ActualNumbersElements();
		this.pNameAttribute = new NameAttributeElements();
		this.pIntNum = new IntNumElements();
		this.pFloatNum = new FloatNumElements();
		this.pLegalType = new LegalTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mdsd.RPG".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SystemRPG:
	//	'game' name=ID declarations+=Declaration*;
	public SystemRPGElements getSystemRPGAccess() {
		return pSystemRPG;
	}
	
	public ParserRule getSystemRPGRule() {
		return getSystemRPGAccess().getRule();
	}
	
	//Declaration:
	//	Locations | Relations | Moves | Entities | Teams | Death | Attributes | Effects;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Effects:
	//	'effects' effect+=Effect+;
	public EffectsElements getEffectsAccess() {
		return pEffects;
	}
	
	public ParserRule getEffectsRule() {
		return getEffectsAccess().getRule();
	}
	
	//Effect:
	//	'effect' (Buff | MoveE | AfterE);
	public EffectElements getEffectAccess() {
		return pEffect;
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}
	
	//Buff:
	//	'buff' name=ID rule=Rule (',' extraRule+=AdditionalBuffRule)*;
	public BuffElements getBuffAccess() {
		return pBuff;
	}
	
	public ParserRule getBuffRule() {
		return getBuffAccess().getRule();
	}
	
	//MoveE:
	//	'move' name=ID rule=Rule (',' extraRule+=AdditionalRule)*;
	public MoveEElements getMoveEAccess() {
		return pMoveE;
	}
	
	public ParserRule getMoveERule() {
		return getMoveEAccess().getRule();
	}
	
	//AfterE:
	//	'after' name=ID rule=Rule;
	public AfterEElements getAfterEAccess() {
		return pAfterE;
	}
	
	public ParserRule getAfterERule() {
		return getAfterEAccess().getRule();
	}
	
	//Attributes:
	//	'attributes' attribute+=Attribute+;
	public AttributesElements getAttributesAccess() {
		return pAttributes;
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}
	
	//Attribute:
	//	modified='unmodified'? 'attribute' name=ID aVal=AttributeValues;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Locations:
	//	'location' loc+=Loc+;
	public LocationsElements getLocationsAccess() {
		return pLocations;
	}
	
	public ParserRule getLocationsRule() {
		return getLocationsAccess().getRule();
	}
	
	//Loc:
	//	name=ID ('type' tipe=[Type] 'effectiveness' eff=ActualNumbers)? 'opponents' team=[Team];
	public LocElements getLocAccess() {
		return pLoc;
	}
	
	public ParserRule getLocRule() {
		return getLocAccess().getRule();
	}
	
	//Relations:
	//	'relations' RelationModifiers? type+=Type+;
	public RelationsElements getRelationsAccess() {
		return pRelations;
	}
	
	public ParserRule getRelationsRule() {
		return getRelationsAccess().getRule();
	}
	
	//RelationModifiers Relations:
	//	'modifiers' 'synergy' syn=ActualNumbers 'effective' eff=ActualNumbers 'ineffective' ineff=ActualNumbers;
	public RelationModifiersElements getRelationModifiersAccess() {
		return pRelationModifiers;
	}
	
	public ParserRule getRelationModifiersRule() {
		return getRelationModifiersAccess().getRule();
	}
	
	//Type:
	//	'type' name=ID tExpression=TypeExpression?;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeExpression:
	//	strong=[Type] (',' strong2+=[Type])* '<' currentT=[Type] '<' weak=[Type] (',' weak2+=[Type])*;
	public TypeExpressionElements getTypeExpressionAccess() {
		return pTypeExpression;
	}
	
	public ParserRule getTypeExpressionRule() {
		return getTypeExpressionAccess().getRule();
	}
	
	//Moves:
	//	'moves' move+=Move+;
	public MovesElements getMovesAccess() {
		return pMoves;
	}
	
	public ParserRule getMovesRule() {
		return getMovesAccess().getRule();
	}
	
	//Move:
	//	'move' name=ID eType=EType att+=AltAttribute* (mEffect+=MEffect | bEffect+=BEffect | aEffect+=AEffect)*;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//MEffect:
	//	'effect' 'move' moveEName=[MoveE];
	public MEffectElements getMEffectAccess() {
		return pMEffect;
	}
	
	public ParserRule getMEffectRule() {
		return getMEffectAccess().getRule();
	}
	
	//BEffect:
	//	'effect' 'buff' buffEName=[Buff];
	public BEffectElements getBEffectAccess() {
		return pBEffect;
	}
	
	public ParserRule getBEffectRule() {
		return getBEffectAccess().getRule();
	}
	
	//AEffect:
	//	'effect' 'after' afterEName=[AfterE];
	public AEffectElements getAEffectAccess() {
		return pAEffect;
	}
	
	public ParserRule getAEffectRule() {
		return getAEffectAccess().getRule();
	}
	
	//EType:
	//	'type' type=[Type];
	public ETypeElements getETypeAccess() {
		return pEType;
	}
	
	public ParserRule getETypeRule() {
		return getETypeAccess().getRule();
	}
	
	//AttributeValues:
	//	'is' (lTypes=LegalType | an=ActualNumbers);
	public AttributeValuesElements getAttributeValuesAccess() {
		return pAttributeValues;
	}
	
	public ParserRule getAttributeValuesRule() {
		return getAttributeValuesAccess().getRule();
	}
	
	//AltAttribute:
	//	'attribute' attribute=[Attribute] av=AttributeValues?;
	public AltAttributeElements getAltAttributeAccess() {
		return pAltAttribute;
	}
	
	public ParserRule getAltAttributeRule() {
		return getAltAttributeAccess().getRule();
	}
	
	//Rule:
	//	('if' or=ORcondition 'then')? target=[Attribute] 'is' sum=Sum;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//AdditionalRule Rule:
	//	target=[Attribute] 'is' sum=Sum 'hits' (hits='user' | hits='enemy');
	public AdditionalRuleElements getAdditionalRuleAccess() {
		return pAdditionalRule;
	}
	
	public ParserRule getAdditionalRuleRule() {
		return getAdditionalRuleAccess().getRule();
	}
	
	//AdditionalBuffRule Rule:
	//	target=[Attribute] 'is' sum=Sum;
	public AdditionalBuffRuleElements getAdditionalBuffRuleAccess() {
		return pAdditionalBuffRule;
	}
	
	public ParserRule getAdditionalBuffRuleRule() {
		return getAdditionalBuffRuleAccess().getRule();
	}
	
	//Entities:
	//	'entities' entity+=Entity+;
	public EntitiesElements getEntitiesAccess() {
		return pEntities;
	}
	
	public ParserRule getEntitiesRule() {
		return getEntitiesAccess().getRule();
	}
	
	//Death:
	//	'death' req=Require;
	public DeathElements getDeathAccess() {
		return pDeath;
	}
	
	public ParserRule getDeathRule() {
		return getDeathAccess().getRule();
	}
	
	//Entity:
	//	'entity' name=ID ('extends' extend=[Entity])? eType=EType att+=AltAttribute* eMoves=EntityMoves;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//EntityMoves:
	//	'move' move+=[Move]+;
	public EntityMovesElements getEntityMovesAccess() {
		return pEntityMoves;
	}
	
	public ParserRule getEntityMovesRule() {
		return getEntityMovesAccess().getRule();
	}
	
	//Teams:
	//	'teams' team+=Team+;
	public TeamsElements getTeamsAccess() {
		return pTeams;
	}
	
	public ParserRule getTeamsRule() {
		return getTeamsAccess().getRule();
	}
	
	//Team:
	//	'team' name=ID members=Members;
	public TeamElements getTeamAccess() {
		return pTeam;
	}
	
	public ParserRule getTeamRule() {
		return getTeamAccess().getRule();
	}
	
	//Members:
	//	'members' entity+=[Entity]+;
	public MembersElements getMembersAccess() {
		return pMembers;
	}
	
	public ParserRule getMembersRule() {
		return getMembersAccess().getRule();
	}
	
	//Require:
	//	'require' log=ORcondition;
	public RequireElements getRequireAccess() {
		return pRequire;
	}
	
	public ParserRule getRequireRule() {
		return getRequireAccess().getRule();
	}
	
	//ORcondition Proposition:
	//	ANDcondition ('OR' {Or.left=current} right=ANDcondition)*;
	public ORconditionElements getORconditionAccess() {
		return pORcondition;
	}
	
	public ParserRule getORconditionRule() {
		return getORconditionAccess().getRule();
	}
	
	//ANDcondition Proposition:
	//	Statement ('AND' {And.left=current} right=Statement)*;
	public ANDconditionElements getANDconditionAccess() {
		return pANDcondition;
	}
	
	public ParserRule getANDconditionRule() {
		return getANDconditionAccess().getRule();
	}
	
	//Statement Proposition:
	//	NumberComparing | '(' ORcondition ')';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//NumberComparing:
	//	left=Sum comp=Comparator right=Sum;
	public NumberComparingElements getNumberComparingAccess() {
		return pNumberComparing;
	}
	
	public ParserRule getNumberComparingRule() {
		return getNumberComparingAccess().getRule();
	}
	
	//Comparator:
	//	{Smaller} '<' | {SmallerEq} '<=' | {Eq} '==' | {BiggerEq} '>=' | {Bigger} '>' | {NEq} '!=';
	public ComparatorElements getComparatorAccess() {
		return pComparator;
	}
	
	public ParserRule getComparatorRule() {
		return getComparatorAccess().getRule();
	}
	
	//Sum:
	//	Multiply (('+' {Add.left=current} | '-' {Sub.left=current}) right=Multiply)*;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//Multiply:
	//	AtomicNumber (('*' {Mult.left=current} | '/' {Div.left=current}) right=AtomicNumber)*;
	public MultiplyElements getMultiplyAccess() {
		return pMultiply;
	}
	
	public ParserRule getMultiplyRule() {
		return getMultiplyAccess().getRule();
	}
	
	//AtomicNumber:
	//	ActualNumbers | NameAttribute;
	public AtomicNumberElements getAtomicNumberAccess() {
		return pAtomicNumber;
	}
	
	public ParserRule getAtomicNumberRule() {
		return getAtomicNumberAccess().getRule();
	}
	
	//ActualNumbers:
	//	FloatNum | IntNum;
	public ActualNumbersElements getActualNumbersAccess() {
		return pActualNumbers;
	}
	
	public ParserRule getActualNumbersRule() {
		return getActualNumbersAccess().getRule();
	}
	
	//NameAttribute:
	//	attribute=[Attribute];
	public NameAttributeElements getNameAttributeAccess() {
		return pNameAttribute;
	}
	
	public ParserRule getNameAttributeRule() {
		return getNameAttributeAccess().getRule();
	}
	
	//IntNum:
	//	value=INT;
	public IntNumElements getIntNumAccess() {
		return pIntNum;
	}
	
	public ParserRule getIntNumRule() {
		return getIntNumAccess().getRule();
	}
	
	//FloatNum:
	//	i=INT '.' decimal=INT;
	public FloatNumElements getFloatNumAccess() {
		return pFloatNum;
	}
	
	public ParserRule getFloatNumRule() {
		return getFloatNumAccess().getRule();
	}
	
	//LegalType:
	//	'Float' | 'Integer';
	public LegalTypeElements getLegalTypeAccess() {
		return pLegalType;
	}
	
	public ParserRule getLegalTypeRule() {
		return getLegalTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
