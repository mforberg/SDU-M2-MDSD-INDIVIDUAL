/**
 * generated by Xtext 2.21.0
 */
package mdsd.rPG.impl;

import java.util.Collection;

import mdsd.rPG.AEffect;
import mdsd.rPG.AltAttribute;
import mdsd.rPG.BEffect;
import mdsd.rPG.EType;
import mdsd.rPG.MEffect;
import mdsd.rPG.Move;
import mdsd.rPG.RPGPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Move</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mdsd.rPG.impl.MoveImpl#getName <em>Name</em>}</li>
 *   <li>{@link mdsd.rPG.impl.MoveImpl#getEType <em>EType</em>}</li>
 *   <li>{@link mdsd.rPG.impl.MoveImpl#getAtt <em>Att</em>}</li>
 *   <li>{@link mdsd.rPG.impl.MoveImpl#getMEffect <em>MEffect</em>}</li>
 *   <li>{@link mdsd.rPG.impl.MoveImpl#getBEffect <em>BEffect</em>}</li>
 *   <li>{@link mdsd.rPG.impl.MoveImpl#getAEffect <em>AEffect</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MoveImpl extends MinimalEObjectImpl.Container implements Move
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getEType() <em>EType</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEType()
   * @generated
   * @ordered
   */
  protected EType eType;

  /**
   * The cached value of the '{@link #getAtt() <em>Att</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtt()
   * @generated
   * @ordered
   */
  protected EList<AltAttribute> att;

  /**
   * The cached value of the '{@link #getMEffect() <em>MEffect</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMEffect()
   * @generated
   * @ordered
   */
  protected EList<MEffect> mEffect;

  /**
   * The cached value of the '{@link #getBEffect() <em>BEffect</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBEffect()
   * @generated
   * @ordered
   */
  protected EList<BEffect> bEffect;

  /**
   * The cached value of the '{@link #getAEffect() <em>AEffect</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAEffect()
   * @generated
   * @ordered
   */
  protected EList<AEffect> aEffect;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MoveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPGPackage.Literals.MOVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPGPackage.MOVE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EType getEType()
  {
    return eType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEType(EType newEType, NotificationChain msgs)
  {
    EType oldEType = eType;
    eType = newEType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPGPackage.MOVE__ETYPE, oldEType, newEType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEType(EType newEType)
  {
    if (newEType != eType)
    {
      NotificationChain msgs = null;
      if (eType != null)
        msgs = ((InternalEObject)eType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPGPackage.MOVE__ETYPE, null, msgs);
      if (newEType != null)
        msgs = ((InternalEObject)newEType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPGPackage.MOVE__ETYPE, null, msgs);
      msgs = basicSetEType(newEType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPGPackage.MOVE__ETYPE, newEType, newEType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AltAttribute> getAtt()
  {
    if (att == null)
    {
      att = new EObjectContainmentEList<AltAttribute>(AltAttribute.class, this, RPGPackage.MOVE__ATT);
    }
    return att;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MEffect> getMEffect()
  {
    if (mEffect == null)
    {
      mEffect = new EObjectContainmentEList<MEffect>(MEffect.class, this, RPGPackage.MOVE__MEFFECT);
    }
    return mEffect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BEffect> getBEffect()
  {
    if (bEffect == null)
    {
      bEffect = new EObjectContainmentEList<BEffect>(BEffect.class, this, RPGPackage.MOVE__BEFFECT);
    }
    return bEffect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AEffect> getAEffect()
  {
    if (aEffect == null)
    {
      aEffect = new EObjectContainmentEList<AEffect>(AEffect.class, this, RPGPackage.MOVE__AEFFECT);
    }
    return aEffect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RPGPackage.MOVE__ETYPE:
        return basicSetEType(null, msgs);
      case RPGPackage.MOVE__ATT:
        return ((InternalEList<?>)getAtt()).basicRemove(otherEnd, msgs);
      case RPGPackage.MOVE__MEFFECT:
        return ((InternalEList<?>)getMEffect()).basicRemove(otherEnd, msgs);
      case RPGPackage.MOVE__BEFFECT:
        return ((InternalEList<?>)getBEffect()).basicRemove(otherEnd, msgs);
      case RPGPackage.MOVE__AEFFECT:
        return ((InternalEList<?>)getAEffect()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPGPackage.MOVE__NAME:
        return getName();
      case RPGPackage.MOVE__ETYPE:
        return getEType();
      case RPGPackage.MOVE__ATT:
        return getAtt();
      case RPGPackage.MOVE__MEFFECT:
        return getMEffect();
      case RPGPackage.MOVE__BEFFECT:
        return getBEffect();
      case RPGPackage.MOVE__AEFFECT:
        return getAEffect();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPGPackage.MOVE__NAME:
        setName((String)newValue);
        return;
      case RPGPackage.MOVE__ETYPE:
        setEType((EType)newValue);
        return;
      case RPGPackage.MOVE__ATT:
        getAtt().clear();
        getAtt().addAll((Collection<? extends AltAttribute>)newValue);
        return;
      case RPGPackage.MOVE__MEFFECT:
        getMEffect().clear();
        getMEffect().addAll((Collection<? extends MEffect>)newValue);
        return;
      case RPGPackage.MOVE__BEFFECT:
        getBEffect().clear();
        getBEffect().addAll((Collection<? extends BEffect>)newValue);
        return;
      case RPGPackage.MOVE__AEFFECT:
        getAEffect().clear();
        getAEffect().addAll((Collection<? extends AEffect>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.MOVE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RPGPackage.MOVE__ETYPE:
        setEType((EType)null);
        return;
      case RPGPackage.MOVE__ATT:
        getAtt().clear();
        return;
      case RPGPackage.MOVE__MEFFECT:
        getMEffect().clear();
        return;
      case RPGPackage.MOVE__BEFFECT:
        getBEffect().clear();
        return;
      case RPGPackage.MOVE__AEFFECT:
        getAEffect().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.MOVE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RPGPackage.MOVE__ETYPE:
        return eType != null;
      case RPGPackage.MOVE__ATT:
        return att != null && !att.isEmpty();
      case RPGPackage.MOVE__MEFFECT:
        return mEffect != null && !mEffect.isEmpty();
      case RPGPackage.MOVE__BEFFECT:
        return bEffect != null && !bEffect.isEmpty();
      case RPGPackage.MOVE__AEFFECT:
        return aEffect != null && !aEffect.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //MoveImpl
