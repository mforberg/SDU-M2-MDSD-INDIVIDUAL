/**
 * generated by Xtext 2.21.0
 */
package mdsd.rPG.impl;

import mdsd.rPG.AEffect;
import mdsd.rPG.AfterE;
import mdsd.rPG.RPGPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>AEffect</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mdsd.rPG.impl.AEffectImpl#getAfterEName <em>After EName</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AEffectImpl extends MinimalEObjectImpl.Container implements AEffect
{
  /**
   * The cached value of the '{@link #getAfterEName() <em>After EName</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAfterEName()
   * @generated
   * @ordered
   */
  protected AfterE afterEName;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AEffectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPGPackage.Literals.AEFFECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AfterE getAfterEName()
  {
    if (afterEName != null && afterEName.eIsProxy())
    {
      InternalEObject oldAfterEName = (InternalEObject)afterEName;
      afterEName = (AfterE)eResolveProxy(oldAfterEName);
      if (afterEName != oldAfterEName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RPGPackage.AEFFECT__AFTER_ENAME, oldAfterEName, afterEName));
      }
    }
    return afterEName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AfterE basicGetAfterEName()
  {
    return afterEName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAfterEName(AfterE newAfterEName)
  {
    AfterE oldAfterEName = afterEName;
    afterEName = newAfterEName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPGPackage.AEFFECT__AFTER_ENAME, oldAfterEName, afterEName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPGPackage.AEFFECT__AFTER_ENAME:
        if (resolve) return getAfterEName();
        return basicGetAfterEName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPGPackage.AEFFECT__AFTER_ENAME:
        setAfterEName((AfterE)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.AEFFECT__AFTER_ENAME:
        setAfterEName((AfterE)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.AEFFECT__AFTER_ENAME:
        return afterEName != null;
    }
    return super.eIsSet(featureID);
  }

} //AEffectImpl
