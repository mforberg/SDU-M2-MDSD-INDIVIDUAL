/**
 * generated by Xtext 2.21.0
 */
package mdsd.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import mdsd.rPG.AEffect;
import mdsd.rPG.ActualNumbers;
import mdsd.rPG.Add;
import mdsd.rPG.AfterE;
import mdsd.rPG.AltAttribute;
import mdsd.rPG.And;
import mdsd.rPG.Attribute;
import mdsd.rPG.Attributes;
import mdsd.rPG.BEffect;
import mdsd.rPG.Bigger;
import mdsd.rPG.BiggerEq;
import mdsd.rPG.Buff;
import mdsd.rPG.Comparator;
import mdsd.rPG.Death;
import mdsd.rPG.Declaration;
import mdsd.rPG.Div;
import mdsd.rPG.Effect;
import mdsd.rPG.Effects;
import mdsd.rPG.Entities;
import mdsd.rPG.Entity;
import mdsd.rPG.Eq;
import mdsd.rPG.FloatNum;
import mdsd.rPG.IntNum;
import mdsd.rPG.Loc;
import mdsd.rPG.Locations;
import mdsd.rPG.MEffect;
import mdsd.rPG.Move;
import mdsd.rPG.MoveE;
import mdsd.rPG.Moves;
import mdsd.rPG.Mult;
import mdsd.rPG.NEq;
import mdsd.rPG.NameAttribute;
import mdsd.rPG.NumberComparing;
import mdsd.rPG.Or;
import mdsd.rPG.Proposition;
import mdsd.rPG.Relations;
import mdsd.rPG.Require;
import mdsd.rPG.Rule;
import mdsd.rPG.Smaller;
import mdsd.rPG.SmallerEq;
import mdsd.rPG.Sub;
import mdsd.rPG.Sum;
import mdsd.rPG.SystemRPG;
import mdsd.rPG.Team;
import mdsd.rPG.Teams;
import mdsd.rPG.Type;
import mdsd.rPG.TypeExpression;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RPGGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final SystemRPG result = Iterators.<SystemRPG>filter(resource.getAllContents(), SystemRPG.class).next();
    this.main(result, fsa);
  }
  
  public void main(final SystemRPG systemRPG, final IFileSystemAccess2 fsa) {
    final String classFileName = systemRPG.getName();
    EList<Declaration> _declarations = systemRPG.getDeclarations();
    for (final Declaration declaration : _declarations) {
      boolean _matched = false;
      if (declaration instanceof Locations) {
        _matched=true;
        this.generateLocations(fsa, ((Locations)declaration));
      }
      if (!_matched) {
        if (declaration instanceof Relations) {
          _matched=true;
          this.generateTypes(fsa, ((Relations)declaration));
        }
      }
      if (!_matched) {
        if (declaration instanceof Moves) {
          _matched=true;
          this.generateMoves(fsa, ((Moves)declaration));
        }
      }
      if (!_matched) {
        if (declaration instanceof Entities) {
          _matched=true;
          this.generateEntities(fsa, ((Entities)declaration));
        }
      }
      if (!_matched) {
        if (declaration instanceof Teams) {
          _matched=true;
          this.generateTeams(fsa, ((Teams)declaration));
        }
      }
      if (!_matched) {
        if (declaration instanceof Attributes) {
          _matched=true;
          this.generateAttributes(fsa, ((Attributes)declaration));
        }
      }
      if (!_matched) {
        if (declaration instanceof Death) {
          _matched=true;
          fsa.generateFile("DeathChecker.java", this.generateDeathChecker(((Death)declaration)));
        }
      }
      if (!_matched) {
        if (declaration instanceof Effects) {
          _matched=true;
          EList<Declaration> _declarations_1 = systemRPG.getDeclarations();
          for (final Declaration dec : _declarations_1) {
            if ((dec instanceof Attributes)) {
              Attributes attributes = ((Attributes)dec);
              this.generateEffectFiles(fsa, ((Effects)declaration), attributes);
            }
          }
        }
      }
      if (!_matched) {
        System.out.println("This is not a supported instance of Declaration");
      }
    }
    fsa.generateFile((classFileName + ".java"), this.generateGame(classFileName));
    fsa.generateFile("Runner.java", this.generateRunner(classFileName));
  }
  
  public CharSequence generateRunner(final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Runner {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append(name, "    \t");
    _builder.append(" ");
    String _lowerCase = name.toLowerCase();
    _builder.append(_lowerCase, "    \t");
    _builder.append(" = new ");
    _builder.append(name, "    \t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    String _lowerCase_1 = name.toLowerCase();
    _builder.append(_lowerCase_1, "    \t");
    _builder.append(".run();");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateDeathChecker(final Death death) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public class DeathChecker {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean check(Entity entity){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Number> eData = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData aData : entity.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return (");
    CharSequence _new_re = this.new_re(death.getReq());
    _builder.append(_new_re, "\t\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("} catch(NullPointerException e){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"The target seems to be invincible.\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateGame(final String classFileName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(classFileName);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private Type type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<Entity> entities;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Team team;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Move move;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private MoveInit moveInit;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private EntityInit entityInit;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private TeamInit teamInit;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private TypeRelation typeRelations;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private TypeRelationsInit typeRelationsInit;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private LocationsInit locationsInit;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Location location;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private DeathChecker deathChecker;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Random random;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String hiddenCurrentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private boolean gameFinished;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private boolean won = false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private boolean lost = false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Scanner s;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Entity playerEntity;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ");
    _builder.append(classFileName, "    ");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    _builder.append("entities = new ArrayList<>();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("type = Type.getInstance();");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("team = new Team();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("move = Move.getInstance();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("location = Location.getInstance();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("deathChecker = new DeathChecker();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("moveInit = new MoveInit();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("entityInit = new EntityInit();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("teamInit = new TeamInit();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("locationsInit = new LocationsInit();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("typeRelations = TypeRelation.getInstance();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("typeRelationsInit = new TypeRelationsInit();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("s = new Scanner(System.in);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("random = new Random();");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("public void run(){");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("initialize();");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("gameLoop();");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("private void initialize(){");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("moveInit.addMoves(move);");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("entityInit.createEntities(entities);");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("teamInit.createTeams(team, entities);");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("typeRelations = typeRelationsInit.createRelations();");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("locationsInit.addLocations(location);");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("private void gameLoop(){");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("playerEntity = team.getPlayerTeam().remove(0);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while (!gameFinished) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(won){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("gameFinished = true;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"You Won!\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}else if(lost){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("gameFinished = true;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"You Lost.\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// Get current location to fight at");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String currentLocation = location.getLocations().remove(0);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String enemyTeamName = location.getTeams().get(currentLocation);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("hiddenCurrentLocation = currentLocation;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("List<Entity> enemyTeam = team.getTeamByName(location.getTeams().get(currentLocation));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"Current Location: \" + currentLocation + \", fighting against: \" + enemyTeamName);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("processGame(enemyTeam);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("private void processGame(List<Entity> enemyTeam){");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("while(enemyTeam.size() > 0 && !lost){");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("Entity enemyEntity = enemyTeam.remove(0);");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("fight(enemyEntity);");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("if(!(location.getLocations().size() > 0) && !lost){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("won = true;");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void executeBuffMove(Move move, String moveName, Entity target){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(!move.getMove(moveName).getBuffEffects().isEmpty()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(EffectBuff buffEffect: move.getMove(moveName).getBuffEffects()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("buffEffect.doEffect(move, moveName, target);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void executeMove(Move move, String moveName, Entity target, Entity user, HashMap<String, Number> eff){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(!move.getMove(moveName).getMoveEffects().isEmpty()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(EffectMove moveEffect: move.getMove(moveName).getMoveEffects()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("moveEffect.doEffect(move, moveName, target, user, eff);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void executeAfter(Move move, String moveName, Entity target){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(!move.getMove(moveName).getAfterEffects().isEmpty()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(EffectAfter afterEffect: move.getMove(moveName).getAfterEffects()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("afterEffect.doEffect(move, moveName, target);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("private void fight(Entity enemyEntity){");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("boolean fighting = true;");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("while(fighting){");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("System.out.println(\"You are against \" + enemyEntity.getName() + \" choose your move\");");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("List<String> moves = playerEntity.getMoveNameList();");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("System.out.print(playerEntity.getName() + \" has: \");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(moves);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("boolean pickMove = true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("HashMap<String, Number> mapEff = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("HashMap<String, Number> temp = location.getEffectivenessMap().get(hiddenCurrentLocation);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("mapEff = temp;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch(Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"Something went really wrong\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while (pickMove){  ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String moveName = s.nextLine();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// Will check that the user picks a move which exists");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(moves.contains(moveName)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(\"You used \"+ moveName + \"\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("executeBuffMove(move, moveName, playerEntity);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("executeMove(move, moveName, enemyEntity, playerEntity, mapEff);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("executeAfter(move, moveName, playerEntity);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("pickMove = !pickMove;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(\"That\'s not a possible move!\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(deathChecker.check(enemyEntity)){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(enemyEntity.getName() + \" is dead!\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("enemyEntity.setEntityState(EntityState.DEAD);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"Enemy Turn...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("int choosenMove = random.nextInt(enemyEntity.getMoveNameList().size());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(enemyEntity.getName() + \" used \" + enemyEntity.getMoveNameList().get(choosenMove) + \"\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("executeBuffMove(move, enemyEntity.getMoveNameList().get(choosenMove), enemyEntity);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("executeMove(move, enemyEntity.getMoveNameList().get(choosenMove), playerEntity, enemyEntity, mapEff);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("executeAfter(move, enemyEntity.getMoveNameList().get(choosenMove), enemyEntity);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(deathChecker.check(playerEntity)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(\"Your \" + playerEntity.getName() + \" is dead\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("playerEntity.setEntityState(EntityState.DEAD);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("// Will add the next player entity to the fight, if there are no more, it will go to game over");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(!team.getPlayerTeam().isEmpty()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("playerEntity = team.getPlayerTeam().remove(0);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("lost = true;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public void generateAttributes(final IFileSystemAccess2 fsa, final Attributes attributes) {
    fsa.generateFile("AttributeEnum.java", this.generateAttributeEnum(attributes));
    fsa.generateFile("AttributeData.java", this.generateAttributeData());
  }
  
  public CharSequence generateAttribute() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Attribute {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<AttributeData> attributes = new ArrayList<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static Attribute attribute;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Attribute() {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static Attribute getInstance() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (attribute == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("attribute = new Attribute();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return attribute;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addAttribute(AttributeData attribute) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("attributes.add(attribute);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getAttributes() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return attributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAttributeChangeEvent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class AttributeChangeEvent{");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private AttributeData previousState;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private AttributeData targetState;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public AttributeChangeEvent(AttributeData previousState, AttributeData targetState){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.previousState = previousState;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.targetState = targetState;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public AttributeData getTargetState(){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.targetState;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public AttributeData getPreviousState(){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.previousState;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAttributeData() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public class AttributeData {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Number number;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String attributeName;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public AttributeData() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public AttributeData(String attributeName, Number number) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.number = number;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.attributeName = attributeName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Number getNumber() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.number;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setNumber(Number number){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.number = number;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getAttributeName() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.attributeName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setAttributeName(String attributeName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.attributeName = attributeName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.number.toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAttributeEnum(final Attributes attributes) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public enum AttributeEnum{");
    _builder.newLine();
    {
      EList<Attribute> _attribute = attributes.getAttribute();
      for(final Attribute attribute : _attribute) {
        String _name = attribute.getName();
        _builder.append(_name);
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public void generateEffectFiles(final IFileSystemAccess2 fsa, final Effects effects, final Attributes attributes) {
    boolean effectBoolean = false;
    EList<Effect> _effect = effects.getEffect();
    for (final Effect effect : _effect) {
      boolean _matched = false;
      if (effect instanceof Buff) {
        _matched=true;
        if ((!effectBoolean)) {
          this.addEveryEffect(fsa);
          effectBoolean = true;
        }
        String _name = ((Buff)effect).getName();
        String _plus = (_name + ".java");
        fsa.generateFile(_plus, this.generateBuffEffectFile(((Buff)effect)));
      }
      if (!_matched) {
        if (effect instanceof MoveE) {
          _matched=true;
          if ((!effectBoolean)) {
            this.addEveryEffect(fsa);
            effectBoolean = true;
          }
          String _name = ((MoveE)effect).getName();
          String _plus = (_name + ".java");
          fsa.generateFile(_plus, this.generateMoveEffectFile(((MoveE)effect), attributes));
        }
      }
      if (!_matched) {
        if (effect instanceof AfterE) {
          _matched=true;
          if ((!effectBoolean)) {
            this.addEveryEffect(fsa);
            effectBoolean = true;
          }
          String _name = ((AfterE)effect).getName();
          String _plus = (_name + ".java");
          fsa.generateFile(_plus, this.generateAfterEffetFile(((AfterE)effect)));
        }
      }
    }
  }
  
  public void addEveryEffect(final IFileSystemAccess2 fsa) {
    fsa.generateFile("EffectBuff.java", this.generateEffectBuff());
    fsa.generateFile("EffectMove.java", this.generateEffectMove());
    fsa.generateFile("EffectAfter.java", this.generateEffectAfter());
  }
  
  public CharSequence generateEffectAfter() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public abstract class EffectAfter {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract boolean effectAfter(Move move, String name, Entity player);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract Number changeAfter(Move move, String name, Entity player);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract void doEffect(Move move, String name, Entity player);    ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAfterEffetFile(final AfterE afterEffect) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public class ");
    String _name = afterEffect.getName();
    _builder.append(_name);
    _builder.append(" extends EffectAfter{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean effectAfter(Move move, String name, Entity player){\t\t\t\t\t");
    _builder.newLine();
    {
      Proposition _or = afterEffect.getRule().getOr();
      boolean _tripleNotEquals = (_or != null);
      if (_tripleNotEquals) {
        _builder.append("\t\t");
        _builder.append("HashMap<String, Number> eData = new HashMap<>();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("for(AttributeData playerData : player.getAttributes()){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("eData.put(playerData.getAttributeName(), playerData.getNumber());");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}\t\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}\t\t\t\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("return ");
        CharSequence _new_logic = this.new_logic(afterEffect.getRule().getOr());
        _builder.append(_new_logic, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("\t\t");
        _builder.append("return true;\t\t\t\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Number changeAfter(Move move, String name, Entity player){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Number> eData = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData playerData : player.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("eData.put(playerData.getAttributeName(), playerData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return ");
    CharSequence _new_exp = this.new_exp(afterEffect.getRule().getSum());
    _builder.append(_new_exp, "\t\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void doEffect(Move move, String name, Entity player){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(effectAfter(move, name, player)){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(AttributeData aData : player.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(aData.getAttributeName() == \"");
    String _name_1 = afterEffect.getRule().getTarget().getName();
    _builder.append(_name_1, "\t\t\t\t");
    _builder.append("\"){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("aData.setNumber(changeAfter(move, name, player));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(player.getName() + \"\'(s) \"  + aData.getAttributeName() + \" is now: \" + aData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(aData.getAttributeName() == \"");
    String _name_2 = afterEffect.getRule().getTarget().getName();
    _builder.append(_name_2, "\t\t\t\t");
    _builder.append("\"){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("aData.setNumber(changeAfter(move, name, player));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(player.getName() + \"\'(s) \"  + aData.getAttributeName() + \" is now: \" + aData.getNumber());\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEffectMove() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public abstract class EffectMove {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public abstract boolean effectMove(Move move, String name, Entity enemy);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public abstract Number changeMove(Move move, String name, Entity enemy, Number modifier);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public abstract void doEffect(Move move, String name, Entity enemy, Entity player, HashMap<String, Number> effMap);    \t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEffectBuff() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public abstract class EffectBuff {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public abstract boolean effectBuff(Move move, String name, Entity player);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public abstract Number changeBuff(Move move, String name, Entity player);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public abstract void doEffect(Move move, String name, Entity player);    \t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateBuffEffectFile(final Buff buff) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public class ");
    String _name = buff.getName();
    _builder.append(_name);
    _builder.append(" extends EffectBuff{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean effectBuff(Move move, String name, Entity player){");
    _builder.newLine();
    {
      Proposition _or = buff.getRule().getOr();
      boolean _tripleNotEquals = (_or != null);
      if (_tripleNotEquals) {
        _builder.append("\t\t");
        _builder.append("HashMap<String, Number> eData = new HashMap<>();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("for(AttributeData playerData : player.getAttributes()){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("eData.put(playerData.getAttributeName(), playerData.getNumber());");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}\t\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}\t\t\t\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("return ");
        CharSequence _new_logic = this.new_logic(buff.getRule().getOr());
        _builder.append(_new_logic, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("\t\t");
        _builder.append("return true;\t\t\t\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Number changeBuff(Move move, String name, Entity player){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Number> eData = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData playerData : player.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("eData.put(playerData.getAttributeName(), playerData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return ");
    CharSequence _new_exp = this.new_exp(buff.getRule().getSum());
    _builder.append(_new_exp, "\t\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Number changeAdditionalBuffs(Move move, String name, Entity enemy, String target){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Number> eData = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData enemyData : enemy.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("eData.put(enemyData.getAttributeName(), enemyData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    {
      EList<Rule> _extraRule = buff.getExtraRule();
      for(final Rule r : _extraRule) {
        _builder.append("\t\t");
        _builder.append("if(target == \"");
        String _name_1 = r.getTarget().getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("\") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("return ");
        CharSequence _new_exp_1 = this.new_exp(r.getSum());
        _builder.append(_new_exp_1, "\t\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void doEffect(Move move, String name, Entity target){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(effectBuff(move, name, target)){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(AttributeData aData : target.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(aData.getAttributeName() == \"");
    String _name_2 = buff.getRule().getTarget().getName();
    _builder.append(_name_2, "\t\t\t\t");
    _builder.append("\"){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("aData.setNumber(changeBuff(move, name, target));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(target.getName() + \"\'(s) \"  + aData.getAttributeName() + \" is now: \" + aData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    {
      EList<Rule> _extraRule_1 = buff.getExtraRule();
      for(final Rule r_1 : _extraRule_1) {
        _builder.append("\t\t\t\t");
        _builder.append("if(aData.getAttributeName() == \"");
        String _name_3 = r_1.getTarget().getName();
        _builder.append(_name_3, "\t\t\t\t");
        _builder.append("\"){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("aData.setNumber(changeAdditionalBuffs(move, name, target, \"");
        String _name_4 = r_1.getTarget().getName();
        _builder.append(_name_4, "\t\t\t\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("System.out.println(target.getName() + \"\'(s) \"  + aData.getAttributeName() + \" is now: \" + aData.getNumber());");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(aData.getAttributeName() == \"");
    String _name_5 = buff.getRule().getTarget().getName();
    _builder.append(_name_5, "\t\t\t\t");
    _builder.append("\"){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("aData.setNumber(changeBuff(move, name, target));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(target.getName() + \"\'(s) \"  + aData.getAttributeName() + \" is now: \" + aData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    {
      EList<Rule> _extraRule_2 = buff.getExtraRule();
      for(final Rule r_2 : _extraRule_2) {
        _builder.append("\t\t\t\t");
        _builder.append("if(aData.getAttributeName() == \"");
        String _name_6 = r_2.getTarget().getName();
        _builder.append(_name_6, "\t\t\t\t");
        _builder.append("\"){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("aData.setNumber(changeAdditionalBuffs(move, name, target, \"");
        String _name_7 = r_2.getTarget().getName();
        _builder.append(_name_7, "\t\t\t\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("System.out.println(target.getName() + \"\'(s) \"  + aData.getAttributeName() + \" is now: \" + aData.getNumber());");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("}\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMoveEffectFile(final MoveE moveE, final Attributes attributes) {
    CharSequence _xblockexpression = null;
    {
      ArrayList<String> unmodifiable_attributes = new ArrayList<String>();
      EList<Attribute> _attribute = attributes.getAttribute();
      for (final Attribute a : _attribute) {
        String _modified = a.getModified();
        boolean _tripleNotEquals = (_modified != null);
        if (_tripleNotEquals) {
          unmodifiable_attributes.add(a.getName());
        }
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.*;");
      _builder.newLine();
      _builder.append("public class ");
      String _name = moveE.getName();
      _builder.append(_name);
      _builder.append(" extends EffectMove{");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("TypeRelation tr = TypeRelation.getInstance();");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public boolean effectMove(Move move, String name, Entity enemy){");
      _builder.newLine();
      {
        Proposition _or = moveE.getRule().getOr();
        boolean _tripleNotEquals_1 = (_or != null);
        if (_tripleNotEquals_1) {
          _builder.append("\t\t");
          _builder.append("HashMap<String, Number> eData = new HashMap<>();");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("for(AttributeData enemyData : enemy.getAttributes()){");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("eData.put(enemyData.getAttributeName(), enemyData.getNumber());");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("}\t\t\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("\t");
          _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("}\t\t\t\t\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("return ");
          CharSequence _new_logic = this.new_logic(moveE.getRule().getOr());
          _builder.append(_new_logic, "\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        } else {
          _builder.append("\t\t");
          _builder.append("return true;\t\t\t\t\t");
          _builder.newLine();
        }
      }
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public Number changeMove(Move move, String name, Entity enemy, Number modifier){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("HashMap<String, Number> eData = new HashMap<>();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(AttributeData enemyData : enemy.getAttributes()){");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("eData.put(enemyData.getAttributeName(), enemyData.getNumber());");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      {
        boolean _contains = unmodifiable_attributes.contains(moveE.getRule().getTarget().getName());
        boolean _not = (!_contains);
        if (_not) {
          _builder.append("\t\t");
          _builder.append("return ");
          CharSequence _new_exp = this.new_exp(moveE.getRule().getSum());
          _builder.append(_new_exp, "\t\t");
          _builder.append(" * modifier.floatValue();");
          _builder.newLineIfNotEmpty();
        } else {
          _builder.append("\t\t");
          _builder.append("return ");
          CharSequence _new_exp_1 = this.new_exp(moveE.getRule().getSum());
          _builder.append(_new_exp_1, "\t\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public Number changeAdditionalMoves(Move move, String name, Entity enemy, String target, Number modifier){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("HashMap<String, Number> eData = new HashMap<>();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(AttributeData enemyData : enemy.getAttributes()){");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("eData.put(enemyData.getAttributeName(), enemyData.getNumber());");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      {
        EList<Rule> _extraRule = moveE.getExtraRule();
        for(final Rule r : _extraRule) {
          {
            boolean _contains_1 = unmodifiable_attributes.contains(r.getTarget().getName());
            boolean _not_1 = (!_contains_1);
            if (_not_1) {
              _builder.append("\t\t");
              _builder.append("if(target == \"");
              String _name_1 = r.getTarget().getName();
              _builder.append(_name_1, "\t\t");
              _builder.append("\") {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("\t");
              _builder.append("return ");
              CharSequence _new_exp_2 = this.new_exp(r.getSum());
              _builder.append(_new_exp_2, "\t\t\t");
              _builder.append(" * modifier.floatValue();");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
            } else {
              _builder.append("\t\t");
              _builder.append("if(target == \"");
              String _name_2 = r.getTarget().getName();
              _builder.append(_name_2, "\t\t");
              _builder.append("\") {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("\t");
              _builder.append("return ");
              CharSequence _new_exp_3 = this.new_exp(r.getSum());
              _builder.append(_new_exp_3, "\t\t\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
            }
          }
        }
      }
      _builder.append("\t\t");
      _builder.append("return null;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void doEffect(Move move, String name, Entity target, Entity user, HashMap<String, Number> eff){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if(effectMove(move, name, user)){");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Number modifier = calculateModifier(move, name, target, user, eff);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("// Do move effects on target");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("for(AttributeData aData : target.getAttributes()){");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if(aData.getAttributeName() == \"");
      String _name_3 = moveE.getRule().getTarget().getName();
      _builder.append(_name_3, "\t\t\t\t");
      _builder.append("\"){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t\t");
      _builder.append("aData.setNumber(changeMove(move, name, target, modifier));");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("System.out.println(target.getName() + \"\'(s) \"  + aData.getAttributeName() + \" is now: \" + aData.getNumber());");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      {
        EList<Rule> _extraRule_1 = moveE.getExtraRule();
        for(final Rule r_1 : _extraRule_1) {
          {
            String _hits = r_1.getHits();
            boolean _equals = Objects.equal(_hits, "enemy");
            if (_equals) {
              _builder.append("\t\t\t\t");
              _builder.append("if(aData.getAttributeName() == \"");
              String _name_4 = r_1.getTarget().getName();
              _builder.append(_name_4, "\t\t\t\t");
              _builder.append("\"){");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t\t\t");
              _builder.append("\t");
              _builder.append("aData.setNumber(changeAdditionalMoves(move, name, target, \"");
              String _name_5 = r_1.getTarget().getName();
              _builder.append(_name_5, "\t\t\t\t\t");
              _builder.append("\", modifier));");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t\t\t");
              _builder.append("\t");
              _builder.append("System.out.println(target.getName() + \"\'(s) \"  + aData.getAttributeName() + \" is now: \" + aData.getNumber());");
              _builder.newLine();
              _builder.append("\t\t\t\t");
              _builder.append("}");
              _builder.newLine();
            }
          }
        }
      }
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("// Do move effects on user");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("for(AttributeData aData : user.getAttributes()) {");
      _builder.newLine();
      {
        EList<Rule> _extraRule_2 = moveE.getExtraRule();
        for(final Rule r_2 : _extraRule_2) {
          {
            String _hits_1 = r_2.getHits();
            boolean _equals_1 = Objects.equal(_hits_1, "user");
            if (_equals_1) {
              _builder.append("\t\t\t\t");
              _builder.append("if(aData.getAttributeName() == \"");
              String _name_6 = r_2.getTarget().getName();
              _builder.append(_name_6, "\t\t\t\t");
              _builder.append("\"){");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t\t\t");
              _builder.append("\t");
              _builder.append("aData.setNumber(changeAdditionalMoves(move, name, user, \"");
              String _name_7 = r_2.getTarget().getName();
              _builder.append(_name_7, "\t\t\t\t\t");
              _builder.append("\", modifier));");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t\t\t");
              _builder.append("\t");
              _builder.append("System.out.println(user.getName() + \"\'(s) \"  + aData.getAttributeName() + \" is now: \" + aData.getNumber());");
              _builder.newLine();
              _builder.append("\t\t\t\t");
              _builder.append("}");
              _builder.newLine();
            }
          }
        }
      }
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}\t\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public Number calculateModifier(Move move, String name, Entity target, Entity user, HashMap<String, Number> eff) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Number modifier = 1.0;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("String moveType = move.getMove(name).getType();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("String userType = user.getType();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("HashMap<String, ArrayList<String>> strong = tr.getStrongMap();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("HashMap<String, ArrayList<String>> weak = tr.getWeakMap();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if(moveType == userType) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("modifier = modifier.floatValue() * tr.getSyn().floatValue();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if(strong.containsKey(moveType)) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("ArrayList<String> strongAgainst = strong.get(moveType);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if(strongAgainst.contains(target.getType())) {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("modifier = modifier.floatValue() * tr.getEff().floatValue();");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("System.out.println(\"User and Move have synergy! ... It is also highly effective!\");");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if(weak.containsKey(moveType)) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("ArrayList<String> weakAgainst = weak.get(moveType);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if(weakAgainst.contains(target.getType())) {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("System.out.println(\"User and Move have synergy! ... But is not very effective!\");");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("modifier = modifier.floatValue() * tr.getIneff().floatValue();");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("} else {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if(strong.containsKey(moveType)) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("ArrayList<String> strongAgainst = strong.get(moveType);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if(strongAgainst.contains(target.getType())) {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("modifier = modifier.floatValue() * tr.getEff().floatValue();");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("System.out.println(\"User and Move have no synergy ... But it is highly effective!\");");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if(weak.containsKey(moveType)) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("ArrayList<String> weakAgainst = weak.get(moveType);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if(weakAgainst.contains(target.getType())) {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("modifier = modifier.floatValue() * tr.getIneff().floatValue();");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("System.out.println(\"User and Move have no synergy ... And it is not very effective..\");");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("try {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("String locationType = \"\";");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Number effectiveness = 1.0;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("for (Map.Entry<String, Number> entry : eff.entrySet()) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if(entry != null) {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("locationType = entry.getKey();");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("effectiveness = entry.getValue();");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if(moveType == locationType) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("modifier = modifier.floatValue() * effectiveness.floatValue();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("} catch(Exception e) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("// Do nothing");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return modifier;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public void generateEntities(final IFileSystemAccess2 fsa, final Entities entities) {
    fsa.generateFile("Entity.java", this.generateEntity());
    fsa.generateFile("EntityEnum.java", this.generateEntityEnum(entities));
    fsa.generateFile("EntityState.java", this.generateEntityState());
    fsa.generateFile("EntityInit.java", this.generateEntityInit(entities));
  }
  
  public CharSequence generateEntity() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public class Entity{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private EntityState state;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<AttributeData> attribute;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<MoveData> moves;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Entity(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("attribute = new ArrayList<>();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("moves = new ArrayList<>();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Entity(Entity e){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.name = e.getName();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.type = e.getType();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.state = e.getEntityState();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if(!e.getAttributes().isEmpty())");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.attribute.addAll(e.getAttributes());");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if(!e.getMoveData().isEmpty())");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moves.addAll(e.getMoveData());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getName(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return this.name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setName(String name){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getType(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return this.type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setType(String type){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getAttributes(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return attribute;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public EntityState getEntityState(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return state;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setEntityState(EntityState state){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.state = state;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addAttribute(AttributeData attribute){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.attribute.add(attribute);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<MoveData> getMoveData(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return moves;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<String> getMoveNameList(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("List<String> moveNames = new ArrayList<>();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("for (MoveData moveData : getMoveData()) {");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("moveNames.add(moveData.getMoveName());");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return moveNames;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addMoveData(MoveData moveData){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("moves.add(moveData);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEntityEnum(final Entities entities) {
    CharSequence _xblockexpression = null;
    {
      String entityEnum = "";
      int i = 1;
      EList<Entity> _entity = entities.getEntity();
      for (final Entity entity : _entity) {
        {
          String _entityEnum = entityEnum;
          String _name = entity.getName();
          entityEnum = (_entityEnum + _name);
          int _size = entities.getEntity().size();
          boolean _lessThan = (i < _size);
          if (_lessThan) {
            String _entityEnum_1 = entityEnum;
            entityEnum = (_entityEnum_1 + ", ");
            i++;
          } else {
            String _entityEnum_2 = entityEnum;
            entityEnum = (_entityEnum_2 + ";");
          }
        }
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("enum EntityEnum{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append(entityEnum, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateEntityState() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public enum EntityState {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("DEAD, ALIVE");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEntityInit(final Entities entities) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class EntityInit{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void createEntities(List<Entity> entities){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("createStandardEntities(entities);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("createExtendedEntities(entities);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void createStandardEntities(List<Entity> entities) {");
    _builder.newLine();
    {
      EList<Entity> _entity = entities.getEntity();
      for(final Entity entity : _entity) {
        {
          Entity _extend = entity.getExtend();
          boolean _tripleEquals = (_extend == null);
          if (_tripleEquals) {
            _builder.append("\t\t");
            _builder.append("Entity ");
            String _lowerCase = entity.getName().toLowerCase();
            _builder.append(_lowerCase, "\t\t");
            _builder.append(" = new Entity();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            String _lowerCase_1 = entity.getName().toLowerCase();
            _builder.append(_lowerCase_1, "\t\t");
            _builder.append(".setName(\"");
            String _name = entity.getName();
            _builder.append(_name, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            String _lowerCase_2 = entity.getName().toLowerCase();
            _builder.append(_lowerCase_2, "\t\t");
            _builder.append(".setType(\"");
            String _name_1 = entity.getEType().getType().getName();
            _builder.append(_name_1, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            {
              EList<Move> _move = entity.getEMoves().getMove();
              for(final Move move : _move) {
                _builder.append("\t\t");
                String _lowerCase_3 = entity.getName().toLowerCase();
                _builder.append(_lowerCase_3, "\t\t");
                _builder.append(".addMoveData(Move.getInstance().getMove(\"");
                String _name_2 = move.getName();
                _builder.append(_name_2, "\t\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              EList<AltAttribute> _att = entity.getAtt();
              for(final AltAttribute att : _att) {
                _builder.append("\t\t");
                String _lowerCase_4 = entity.getName().toLowerCase();
                _builder.append(_lowerCase_4, "\t\t");
                _builder.append(".addAttribute(new AttributeData(\"");
                String _name_3 = att.getAttribute().getName();
                _builder.append(_name_3, "\t\t");
                _builder.append("\", ");
                Number _numberValue = this.getNumberValue(att.getAv().getAn());
                _builder.append(_numberValue, "\t\t");
                _builder.append("));");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t");
            _builder.append("entities.add(");
            String _lowerCase_5 = entity.getName().toLowerCase();
            _builder.append(_lowerCase_5, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void createExtendedEntities(List<Entity> entities) {");
    _builder.newLine();
    {
      EList<Entity> _entity_1 = entities.getEntity();
      for(final Entity entity_1 : _entity_1) {
        {
          Entity _extend_1 = entity_1.getExtend();
          boolean _tripleNotEquals = (_extend_1 != null);
          if (_tripleNotEquals) {
            _builder.append("\t\t");
            _builder.append("Entity ");
            String _lowerCase_6 = entity_1.getName().toLowerCase();
            _builder.append(_lowerCase_6, "\t\t");
            _builder.append(" = new Entity();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            String _lowerCase_7 = entity_1.getName().toLowerCase();
            _builder.append(_lowerCase_7, "\t\t");
            _builder.append(".setName(\"");
            String _name_4 = entity_1.getName();
            _builder.append(_name_4, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            String _lowerCase_8 = entity_1.getName().toLowerCase();
            _builder.append(_lowerCase_8, "\t\t");
            _builder.append(".setType(\"");
            String _name_5 = entity_1.getEType().getType().getName();
            _builder.append(_name_5, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            {
              EList<Move> _move_1 = entity_1.getEMoves().getMove();
              for(final Move move_1 : _move_1) {
                _builder.append("\t\t");
                String _lowerCase_9 = entity_1.getName().toLowerCase();
                _builder.append(_lowerCase_9, "\t\t");
                _builder.append(".addMoveData(Move.getInstance().getMove(\"");
                String _name_6 = move_1.getName();
                _builder.append(_name_6, "\t\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              EList<AltAttribute> _att_1 = entity_1.getAtt();
              for(final AltAttribute att_1 : _att_1) {
                _builder.append("\t\t");
                String _lowerCase_10 = entity_1.getName().toLowerCase();
                _builder.append(_lowerCase_10, "\t\t");
                _builder.append(".addAttribute(new AttributeData(\"");
                String _name_7 = att_1.getAttribute().getName();
                _builder.append(_name_7, "\t\t");
                _builder.append("\", ");
                Number _numberValue_1 = this.getNumberValue(att_1.getAv().getAn());
                _builder.append(_numberValue_1, "\t\t");
                _builder.append("));");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t");
            CharSequence _addExtendedStuff = this.addExtendedStuff(entity_1, entities);
            _builder.append(_addExtendedStuff, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("entities.add(");
            String _lowerCase_11 = entity_1.getName().toLowerCase();
            _builder.append(_lowerCase_11, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence addExtendedStuff(final Entity currentEntity, final Entities allEntities) {
    CharSequence _xblockexpression = null;
    {
      final HashSet<String> observed_move = new HashSet<String>();
      final HashSet<String> observed_attribute = new HashSet<String>();
      EList<Move> _move = currentEntity.getEMoves().getMove();
      for (final Move m : _move) {
        observed_move.add(m.getName());
      }
      EList<AltAttribute> _att = currentEntity.getAtt();
      for (final AltAttribute a : _att) {
        observed_attribute.add(a.getAttribute().getName());
      }
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<Entity> _entity = allEntities.getEntity();
        for(final Entity new_entity : _entity) {
          {
            String _name = currentEntity.getExtend().getName();
            String _name_1 = new_entity.getName();
            boolean _tripleEquals = (_name == _name_1);
            if (_tripleEquals) {
              {
                EList<Move> _move_1 = new_entity.getEMoves().getMove();
                for(final Move move : _move_1) {
                  {
                    boolean _contains = observed_move.contains(move.getName());
                    boolean _not = (!_contains);
                    if (_not) {
                      String _lowerCase = currentEntity.getName().toLowerCase();
                      _builder.append(_lowerCase);
                      _builder.append(".addMoveData(Move.getInstance().getMove(\"");
                      String _name_2 = move.getName();
                      _builder.append(_name_2);
                      _builder.append("\"));");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    EList<AltAttribute> _att_1 = new_entity.getAtt();
                    for(final AltAttribute att : _att_1) {
                      {
                        boolean _contains_1 = observed_attribute.contains(att.getAttribute().getName());
                        boolean _not_1 = (!_contains_1);
                        if (_not_1) {
                          String _lowerCase_1 = currentEntity.getName().toLowerCase();
                          _builder.append(_lowerCase_1);
                          _builder.append(".addAttribute(new AttributeData(\"");
                          String _name_3 = att.getAttribute().getName();
                          _builder.append(_name_3);
                          _builder.append("\", ");
                          Number _numberValue = this.getNumberValue(att.getAv().getAn());
                          _builder.append(_numberValue);
                          _builder.append("));");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence new_re(final Require req) {
    return this.new_logic(req.getLog());
  }
  
  public String generateComp(final Comparator op) {
    String _switchResult = null;
    boolean _matched = false;
    if (op instanceof Eq) {
      _matched=true;
      _switchResult = "==";
    }
    if (!_matched) {
      if (op instanceof Smaller) {
        _matched=true;
        _switchResult = "<";
      }
    }
    if (!_matched) {
      if (op instanceof Bigger) {
        _matched=true;
        _switchResult = ">";
      }
    }
    if (!_matched) {
      if (op instanceof SmallerEq) {
        _matched=true;
        _switchResult = "<=";
      }
    }
    if (!_matched) {
      if (op instanceof BiggerEq) {
        _matched=true;
        _switchResult = ">=";
      }
    }
    if (!_matched) {
      if (op instanceof NEq) {
        _matched=true;
        _switchResult = "!=";
      }
    }
    return _switchResult;
  }
  
  protected CharSequence _new_logic(final Or x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_logic = this.new_logic(x.getLeft());
    _builder.append(_new_logic);
    _builder.append("||");
    CharSequence _new_logic_1 = this.new_logic(x.getRight());
    _builder.append(_new_logic_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_logic(final And x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_logic = this.new_logic(x.getLeft());
    _builder.append(_new_logic);
    _builder.append("&&");
    CharSequence _new_logic_1 = this.new_logic(x.getRight());
    _builder.append(_new_logic_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_logic(final NumberComparing x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_exp = this.new_exp(x.getLeft());
    _builder.append(_new_exp);
    String _generateComp = this.generateComp(x.getComp());
    _builder.append(_generateComp);
    CharSequence _new_exp_1 = this.new_exp(x.getRight());
    _builder.append(_new_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_exp(final Add x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_exp = this.new_exp(x.getLeft());
    _builder.append(_new_exp);
    _builder.append("+");
    CharSequence _new_exp_1 = this.new_exp(x.getRight());
    _builder.append(_new_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_exp(final Sub x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_exp = this.new_exp(x.getLeft());
    _builder.append(_new_exp);
    _builder.append("-");
    CharSequence _new_exp_1 = this.new_exp(x.getRight());
    _builder.append(_new_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_exp(final Mult x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_exp = this.new_exp(x.getLeft());
    _builder.append(_new_exp);
    _builder.append("*");
    CharSequence _new_exp_1 = this.new_exp(x.getRight());
    _builder.append(_new_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_exp(final Div x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_exp = this.new_exp(x.getLeft());
    _builder.append(_new_exp);
    _builder.append("/");
    CharSequence _new_exp_1 = this.new_exp(x.getRight());
    _builder.append(_new_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_exp(final IntNum x) {
    return Integer.toString(x.getValue());
  }
  
  protected CharSequence _new_exp(final FloatNum x) {
    String _string = Integer.toString(x.getI());
    String _plus = (_string + ".");
    String _string_1 = Integer.toString(x.getDecimal());
    return (_plus + _string_1);
  }
  
  protected CharSequence _new_exp(final NameAttribute x) {
    String _xifexpression = null;
    if (((x.getAttribute().getAVal().getLTypes() != null) && x.getAttribute().getAVal().getLTypes().equals("Integer"))) {
      String _name = x.getAttribute().getName();
      String _plus = (("eData.get(" + "\"") + _name);
      String _plus_1 = (_plus + "\"");
      _xifexpression = (_plus_1 + ").intValue()");
    } else {
      String _xifexpression_1 = null;
      if (((x.getAttribute().getAVal().getLTypes() != null) && x.getAttribute().getAVal().getLTypes().equals("Float"))) {
        String _name_1 = x.getAttribute().getName();
        String _plus_2 = (("eData.get(" + "\"") + _name_1);
        String _plus_3 = (_plus_2 + "\"");
        _xifexpression_1 = (_plus_3 + ").floatValue()");
      } else {
        String _xifexpression_2 = null;
        if (((x.getAttribute().getAVal().getAn() != null) && (x.getAttribute().getAVal().getAn() instanceof IntNum))) {
          String _name_2 = x.getAttribute().getName();
          String _plus_4 = (("eData.get(" + "\"") + _name_2);
          String _plus_5 = (_plus_4 + "\"");
          _xifexpression_2 = (_plus_5 + ").intValue()");
        } else {
          String _xifexpression_3 = null;
          if (((x.getAttribute().getAVal().getAn() != null) && (x.getAttribute().getAVal().getAn() instanceof FloatNum))) {
            String _name_3 = x.getAttribute().getName();
            String _plus_6 = (("eData.get(" + "\"") + _name_3);
            String _plus_7 = (_plus_6 + "\"");
            _xifexpression_3 = (_plus_7 + ").floatValue()");
          } else {
            _xifexpression_3 = "Something went wrong";
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  protected Number _getNumberValue(final IntNum x) {
    return Integer.valueOf(x.getValue());
  }
  
  protected Number _getNumberValue(final FloatNum x) {
    Float _xblockexpression = null;
    {
      int _i = x.getI();
      String _plus = (Integer.valueOf(_i) + ".");
      int _decimal = x.getDecimal();
      final String floatstring = (_plus + Integer.valueOf(_decimal));
      _xblockexpression = Float.valueOf(floatstring);
    }
    return _xblockexpression;
  }
  
  public void generateLocations(final IFileSystemAccess2 fsa, final Locations locations) {
    fsa.generateFile("Location.java", this.generateLocation(locations));
    fsa.generateFile("LocationsInit.java", this.generateLocationInit(locations));
  }
  
  public CharSequence generateLocation(final Locations locations) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Location {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<String> locations;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String currentTeam;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private HashMap<String, HashMap<String, Number>> effectivenessMap;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Map<String, String> teams;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static Location location;    ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Location(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locations = new ArrayList<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("teams = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("effectivenessMap = new HashMap<>();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static Location getInstance(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(location == null){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("location = new Location();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return location;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public HashMap<String, HashMap<String, Number>> getEffectivenessMap() {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return effectivenessMap;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addEffectiveness(String location, String tipe, Number n) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Number> temp = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("temp.put(tipe, n);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("effectivenessMap.put(location, temp);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getCurrentLocation(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getCurrentTeam(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.currentTeam;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Map<String, String> getTeams(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.teams;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<String> getLocations(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.locations;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setLocations(List<String> locations){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.locations = locations;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setCurrentLocation(String currentLocation){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.currentLocation = currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addLocation(String location){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locations.add(location);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addTeamToLocation(String location, String team){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(locations.contains(location)){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("teams.put(location, team);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("addLocation(location);");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("teams.put(location, team);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateLocationInit(final Locations locations) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class LocationsInit{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addLocations(Location location){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String locationName;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String teamName;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Number currentEffectiveness;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String tipe;");
    _builder.newLine();
    {
      EList<Loc> _loc = locations.getLoc();
      for(final Loc location : _loc) {
        _builder.append("\t\t");
        _builder.append("locationName = \"");
        String _name = location.getName();
        _builder.append(_name, "\t\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("teamName = \"");
        String _name_1 = location.getTeam().getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        {
          Type _tipe = location.getTipe();
          boolean _tripleNotEquals = (_tipe != null);
          if (_tripleNotEquals) {
            _builder.append("\t\t");
            _builder.append("tipe = \"");
            String _name_2 = location.getTipe().getName();
            _builder.append(_name_2, "\t\t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("currentEffectiveness = ");
            Number _numberValue = this.getNumberValue(location.getEff());
            _builder.append(_numberValue, "\t\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("location.addEffectiveness(locationName, tipe, currentEffectiveness);");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.append("location.addTeamToLocation(locationName, teamName);");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public void generateMoves(final IFileSystemAccess2 fsa, final Moves moves) {
    fsa.generateFile("Move.java", this.generateMove());
    fsa.generateFile("MoveEnum.java", this.generateMoveEnum(moves));
    fsa.generateFile("MoveInit.java", this.generateMoveInit(moves));
    fsa.generateFile("MoveData.java", this.generateMoveData());
  }
  
  public CharSequence generateMove() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("public class Move{\t\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Move move;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<MoveData> moves = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Move(){}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Move getInstance(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (move == null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("move = new Move();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return move;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addMove(MoveData move){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("moves.add(move);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public MoveData getMove(String move){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MoveData mD = null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (MoveData moveData : moves) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(moveData.getMoveName().equals(move)){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("mD = moveData;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return mD;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<MoveData> getMoves(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return moves;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMoveData() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MoveData{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String moveName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<AttributeData> moveAttributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<EffectMove> moveEffects;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<EffectBuff> buffEffects;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<EffectAfter> afterEffects;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MoveData(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveAttributes = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.moveEffects = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.buffEffects = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.afterEffects = new ArrayList<>();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MoveData(String moveName, String type, List<AttributeData> moveAttributes, List<EffectMove> moveEffects, List<EffectBuff> buffEffects, List<EffectAfter> afterEffects) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveName = moveName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveAttributes = moveAttributes;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.moveEffects = moveEffects;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.buffEffects = buffEffects;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.afterEffects = afterEffects;\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getMoveName(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.moveName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setMoveName(String moveName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveName = moveName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getType() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setType(String type) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getMoveAttributes() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.moveAttributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setMoveAttributes(List<AttributeData> moveAttributes) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveAttributes = moveAttributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addAttribute(AttributeData attribute){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("moveAttributes.add(attribute);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<EffectBuff> getBuffEffects(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.buffEffects;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<EffectMove> getMoveEffects(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.moveEffects;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<EffectAfter> getAfterEffects(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.afterEffects;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addMoveEffect(EffectMove moveEffect){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.moveEffects.add(moveEffect);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addBuffEffect(EffectBuff buffEffect){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.buffEffects.add(buffEffect);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addAfterEffect(EffectAfter afterEffect){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.afterEffects.add(afterEffect);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean equals(Object o) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (o == this)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!(o instanceof MoveData)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MoveData moveData = (MoveData) o;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Objects.equals(moveName, moveData.moveName) && Objects.equals(type, moveData.type) && Objects.equals(moveAttributes, moveData.moveAttributes);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int hashCode() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Objects.hash(moveName, type, moveAttributes, moveEffects, buffEffects, afterEffects);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return getMoveName();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMoveEnum(final Moves moves) {
    CharSequence _xblockexpression = null;
    {
      String moveEnums = "";
      int i = 1;
      EList<Move> _move = moves.getMove();
      for (final Move move : _move) {
        {
          String name = move.getName();
          String type = move.getEType().getType().getName();
          String _moveEnums = moveEnums;
          moveEnums = (_moveEnums + name);
          String _moveEnums_1 = moveEnums;
          moveEnums = (_moveEnums_1 + (((("(" + "\"") + type) + "\"") + ")"));
          int _size = moves.getMove().size();
          boolean _lessThan = (i < _size);
          if (_lessThan) {
            String _moveEnums_2 = moveEnums;
            moveEnums = (_moveEnums_2 + ", ");
            i++;
          } else {
            String _moveEnums_3 = moveEnums;
            moveEnums = (_moveEnums_3 + ";");
          }
        }
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("enum MoveEnum{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append(moveEnums, "    ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("private String type;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("private MoveEnum(String type){");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("this.type = type;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public String getType(){");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("return this.type;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateMoveInit(final Moves moves) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MoveInit{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addMoves(Move moves){ //private Move moves = Move.getInstance()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MoveData tempMoveData;");
    _builder.newLine();
    {
      EList<Move> _move = moves.getMove();
      for(final Move move : _move) {
        _builder.append("\t\t");
        _builder.append("tempMoveData = new MoveData();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("tempMoveData.setMoveName(\"");
        String _name = move.getName();
        _builder.append(_name, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("tempMoveData.setType(\"");
        String _name_1 = move.getEType().getType().getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        {
          EList<AltAttribute> _att = move.getAtt();
          for(final AltAttribute att : _att) {
            _builder.append("\t\t");
            _builder.append("tempMoveData.addAttribute(new AttributeData(\"");
            String _name_2 = att.getAttribute().getName();
            _builder.append(_name_2, "\t\t");
            _builder.append("\", ");
            Number _numberValue = this.getNumberValue(att.getAv().getAn());
            _builder.append(_numberValue, "\t\t");
            _builder.append("));");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EList<MEffect> _mEffect = move.getMEffect();
          for(final MEffect moveEffect : _mEffect) {
            {
              if ((moveEffect != null)) {
                _builder.append("\t\t");
                _builder.append("tempMoveData.addMoveEffect(new ");
                String _name_3 = moveEffect.getMoveEName().getName();
                _builder.append(_name_3, "\t\t");
                _builder.append("());");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          EList<BEffect> _bEffect = move.getBEffect();
          for(final BEffect buffEffect : _bEffect) {
            {
              if ((buffEffect != null)) {
                _builder.append("\t\t");
                _builder.append("tempMoveData.addBuffEffect(new ");
                String _name_4 = buffEffect.getBuffEName().getName();
                _builder.append(_name_4, "\t\t");
                _builder.append("());");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          EList<AEffect> _aEffect = move.getAEffect();
          for(final AEffect afterEffect : _aEffect) {
            {
              if ((afterEffect != null)) {
                _builder.append("\t\t");
                _builder.append("tempMoveData.addAfterEffect(new ");
                String _name_5 = afterEffect.getAfterEName().getName();
                _builder.append(_name_5, "\t\t");
                _builder.append("());");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t\t");
        _builder.append("moves.addMove(tempMoveData);");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public void generateTeams(final IFileSystemAccess2 fsa, final Teams teams) {
    fsa.generateFile("Team.java", this.generateTeam());
    fsa.generateFile("TeamInit.java", this.generateTeamInit(teams));
  }
  
  public String addTeamMemberString(final Team team) {
    String _xblockexpression = null;
    {
      String _name = team.getName();
      String _plus = (("team.addTeamMember(" + "\"") + _name);
      String _plus_1 = (_plus + "\"");
      String createTeamString = (_plus_1 + ", ");
      int i = 1;
      EList<Entity> _entity = team.getMembers().getEntity();
      for (final Entity e : _entity) {
        {
          String _createTeamString = createTeamString;
          String _name_1 = e.getName();
          String _plus_2 = (("findEntityByName(" + "\"") + _name_1);
          String _plus_3 = (_plus_2 + "\"");
          String _plus_4 = (_plus_3 + ", entities");
          String _plus_5 = (_plus_4 + ")");
          createTeamString = (_createTeamString + _plus_5);
          int _size = team.getMembers().getEntity().size();
          boolean _greaterThan = (_size > i);
          if (_greaterThan) {
            i++;
            String _createTeamString_1 = createTeamString;
            createTeamString = (_createTeamString_1 + ", ");
          } else {
            String _createTeamString_2 = createTeamString;
            createTeamString = (_createTeamString_2 + ");");
          }
        }
      }
      _xblockexpression = createTeamString;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateTeam() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Team {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Map<String, List<Entity>> teams;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<String> teamNames;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Team() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("teams = new HashMap<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("teamNames = new ArrayList<>(); ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Entity> getTeamByName(String name) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!teams.containsKey(name)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return teams.get(name);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addTeamMember(String team, Entity... entity) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!teams.containsKey(team)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("teams.put(team, entityAdder(entity));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("teamNames.add(team);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("teams.get(team).addAll(entityAdder(entity));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Entity> entityAdder(Entity... entity) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("List<Entity> eList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Entity entity2 : entity) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Entity tempEntity = new Entity(entity2);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("eList.add(tempEntity);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return eList;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Map<String, List<Entity>> getTeams(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return teams;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Entity> getPlayerTeam(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return teams.get(teamNames.get(0));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean checkPlayerEntities(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int playerTeamSize = getPlayerTeam().size();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int deadEntities = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Entity entity : getPlayerTeam()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(entity.getEntityState() == EntityState.DEAD) break;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("deadEntities++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(deadEntities == playerTeamSize) return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int playerEntitiesAlive(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int alive = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Entity entity : getPlayerTeam()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(entity.getEntityState() != EntityState.DEAD) alive++;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return alive;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTeamInit(final Teams teams) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TeamInit{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void createTeams(Team team, List<Entity> entities){");
    _builder.newLine();
    {
      EList<Team> _team = teams.getTeam();
      for(final Team team : _team) {
        _builder.append("\t\t");
        String _addTeamMemberString = this.addTeamMemberString(team);
        _builder.append(_addTeamMemberString, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Entity findEntityByName(String name, List<Entity> entities){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(Entity e : entities){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(e.getName().equals(name)){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return e;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public void generateTypes(final IFileSystemAccess2 fsa, final Relations relations) {
    fsa.generateFile("Type.java", this.generateType());
    fsa.generateFile("TypeEnum.java", this.generateTypeEnum(relations));
    fsa.generateFile("TypeRelation.java", this.generateTypeRelation(relations));
    fsa.generateFile("TypeRelationsInit.java", this.generateTypeInit(relations));
  }
  
  public CharSequence generateTypeRelation(final Relations relations) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public class TypeRelation {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("private HashMap<String, ArrayList<String>> weakMap;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("private HashMap<String, ArrayList<String>> strongMap;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    {
      ActualNumbers _syn = relations.getSyn();
      boolean _tripleNotEquals = (_syn != null);
      if (_tripleNotEquals) {
        _builder.append("\t\t\t");
        _builder.append("private Number synergyModifier = ");
        Number _numberValue = this.getNumberValue(relations.getSyn());
        _builder.append(_numberValue, "\t\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("private Number effectiveModifier = ");
        Number _numberValue_1 = this.getNumberValue(relations.getEff());
        _builder.append(_numberValue_1, "\t\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("private Number ineffectiveModifier = ");
        Number _numberValue_2 = this.getNumberValue(relations.getIneff());
        _builder.append(_numberValue_2, "\t\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("\t\t\t");
        _builder.append("private Number synergyModifier = 1.5;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("private Number effectiveModifier = 1.5;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("private Number ineffectiveModifier = 0.5;");
        _builder.newLine();
      }
    }
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private static TypeRelation tr;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public TypeRelation(){");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("weakMap = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("strongMap = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public static TypeRelation getInstance(){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(tr == null){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("tr = new TypeRelation();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return tr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public void addToW(String target, ArrayList<String> value) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("weakMap.put(target, value);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public void addToS(String target, ArrayList<String> value) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("strongMap.put(target, value);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public HashMap<String, ArrayList<String>> getWeakMap() {");
    _builder.newLine();
    _builder.append("\t\t    \t");
    _builder.append("return weakMap;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public HashMap<String, ArrayList<String>> getStrongMap() {");
    _builder.newLine();
    _builder.append("\t\t    \t");
    _builder.append("return strongMap;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public Number getSyn() {");
    _builder.newLine();
    _builder.append("\t\t    \t");
    _builder.append("return synergyModifier;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public Number getEff() {");
    _builder.newLine();
    _builder.append("\t\t    \t");
    _builder.append("return effectiveModifier;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public Number getIneff() {");
    _builder.newLine();
    _builder.append("\t\t    \t");
    _builder.append("return ineffectiveModifier;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTypeInit(final Relations relations) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("public class TypeRelationsInit{");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public TypeRelation createRelations(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TypeRelation tr = TypeRelation.getInstance();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Type> _type = relations.getType();
      for(final Type t : _type) {
        {
          TypeExpression _tExpression = t.getTExpression();
          boolean _tripleNotEquals = (_tExpression != null);
          if (_tripleNotEquals) {
            _builder.append("\t\t");
            _builder.append("ArrayList<String> ");
            String _name = t.getName();
            _builder.append(_name, "\t\t");
            _builder.append("StrongList = new ArrayList<String>();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("ArrayList<String> ");
            String _name_1 = t.getName();
            _builder.append(_name_1, "\t\t");
            _builder.append("WeakList = new ArrayList<String>();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            String _name_2 = t.getName();
            _builder.append(_name_2, "\t\t");
            _builder.append("StrongList.add(\"");
            String _name_3 = t.getTExpression().getStrong().getName();
            _builder.append(_name_3, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            String _name_4 = t.getName();
            _builder.append(_name_4, "\t\t");
            _builder.append("WeakList.add(\"");
            String _name_5 = t.getTExpression().getWeak().getName();
            _builder.append(_name_5, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            {
              EList<Type> _strong2 = t.getTExpression().getStrong2();
              for(final Type moreStrong : _strong2) {
                _builder.append("\t\t");
                String _name_6 = t.getName();
                _builder.append(_name_6, "\t\t");
                _builder.append("StrongList.add(\"");
                String _name_7 = moreStrong.getName();
                _builder.append(_name_7, "\t\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              EList<Type> _weak2 = t.getTExpression().getWeak2();
              for(final Type worse : _weak2) {
                _builder.append("\t\t");
                String _name_8 = t.getName();
                _builder.append(_name_8, "\t\t");
                _builder.append("WeakList.add(\"");
                String _name_9 = worse.getName();
                _builder.append(_name_9, "\t\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t");
            _builder.append("tr.addToS(\"");
            String _name_10 = t.getName();
            _builder.append(_name_10, "\t\t");
            _builder.append("\", ");
            String _name_11 = t.getName();
            _builder.append(_name_11, "\t\t");
            _builder.append("StrongList);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("tr.addToW(\"");
            String _name_12 = t.getName();
            _builder.append(_name_12, "\t\t");
            _builder.append("\", ");
            String _name_13 = t.getName();
            _builder.append(_name_13, "\t\t");
            _builder.append("WeakList);");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("\t\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return tr;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateType() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("public class Type{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<String> types = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private HashMap<String, TypeRelation> typeRelations = new HashMap<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Type type;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Type(){}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Type getInstance(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(type == null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("type = new Type();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return type;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addType(String type){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("types.add(type);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<String> getTypes(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return types;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addTypeRelation(String typeString, TypeRelation tr){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("typeRelations.put(typeString, tr);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public HashMap<String, TypeRelation> getTypeRelations(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return typeRelations;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTypeEnum(final Relations relations) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public enum TypeEnum{");
    _builder.newLine();
    {
      EList<Type> _type = relations.getType();
      for(final Type type : _type) {
        String _name = type.getName();
        _builder.append(_name);
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence new_logic(final Proposition x) {
    if (x instanceof And) {
      return _new_logic((And)x);
    } else if (x instanceof NumberComparing) {
      return _new_logic((NumberComparing)x);
    } else if (x instanceof Or) {
      return _new_logic((Or)x);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x).toString());
    }
  }
  
  public CharSequence new_exp(final Sum x) {
    if (x instanceof FloatNum) {
      return _new_exp((FloatNum)x);
    } else if (x instanceof IntNum) {
      return _new_exp((IntNum)x);
    } else if (x instanceof NameAttribute) {
      return _new_exp((NameAttribute)x);
    } else if (x instanceof Div) {
      return _new_exp((Div)x);
    } else if (x instanceof Mult) {
      return _new_exp((Mult)x);
    } else if (x instanceof Add) {
      return _new_exp((Add)x);
    } else if (x instanceof Sub) {
      return _new_exp((Sub)x);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x).toString());
    }
  }
  
  public Number getNumberValue(final ActualNumbers x) {
    if (x instanceof FloatNum) {
      return _getNumberValue((FloatNum)x);
    } else if (x instanceof IntNum) {
      return _getNumberValue((IntNum)x);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x).toString());
    }
  }
}
