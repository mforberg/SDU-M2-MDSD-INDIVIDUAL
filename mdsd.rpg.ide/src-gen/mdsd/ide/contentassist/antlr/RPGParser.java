/*
 * generated by Xtext 2.21.0
 */
package mdsd.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import mdsd.ide.contentassist.antlr.internal.InternalRPGParser;
import mdsd.services.RPGGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RPGParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RPGGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RPGGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
			builder.put(grammarAccess.getEffectAccess().getAlternatives_1(), "rule__Effect__Alternatives_1");
			builder.put(grammarAccess.getMoveAccess().getAlternatives_4(), "rule__Move__Alternatives_4");
			builder.put(grammarAccess.getAttributeValuesAccess().getAlternatives_1(), "rule__AttributeValues__Alternatives_1");
			builder.put(grammarAccess.getAdditionalRuleAccess().getAlternatives_4(), "rule__AdditionalRule__Alternatives_4");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getComparatorAccess().getAlternatives(), "rule__Comparator__Alternatives");
			builder.put(grammarAccess.getSumAccess().getAlternatives_1_0(), "rule__Sum__Alternatives_1_0");
			builder.put(grammarAccess.getMultiplyAccess().getAlternatives_1_0(), "rule__Multiply__Alternatives_1_0");
			builder.put(grammarAccess.getAtomicNumberAccess().getAlternatives(), "rule__AtomicNumber__Alternatives");
			builder.put(grammarAccess.getActualNumbersAccess().getAlternatives(), "rule__ActualNumbers__Alternatives");
			builder.put(grammarAccess.getLegalTypeAccess().getAlternatives(), "rule__LegalType__Alternatives");
			builder.put(grammarAccess.getSystemRPGAccess().getGroup(), "rule__SystemRPG__Group__0");
			builder.put(grammarAccess.getEffectsAccess().getGroup(), "rule__Effects__Group__0");
			builder.put(grammarAccess.getEffectAccess().getGroup(), "rule__Effect__Group__0");
			builder.put(grammarAccess.getBuffAccess().getGroup(), "rule__Buff__Group__0");
			builder.put(grammarAccess.getBuffAccess().getGroup_3(), "rule__Buff__Group_3__0");
			builder.put(grammarAccess.getMoveEAccess().getGroup(), "rule__MoveE__Group__0");
			builder.put(grammarAccess.getMoveEAccess().getGroup_3(), "rule__MoveE__Group_3__0");
			builder.put(grammarAccess.getAfterEAccess().getGroup(), "rule__AfterE__Group__0");
			builder.put(grammarAccess.getAttributesAccess().getGroup(), "rule__Attributes__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getLocationsAccess().getGroup(), "rule__Locations__Group__0");
			builder.put(grammarAccess.getLocAccess().getGroup(), "rule__Loc__Group__0");
			builder.put(grammarAccess.getLocAccess().getGroup_1(), "rule__Loc__Group_1__0");
			builder.put(grammarAccess.getRelationsAccess().getGroup(), "rule__Relations__Group__0");
			builder.put(grammarAccess.getRelationModifiersAccess().getGroup(), "rule__RelationModifiers__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
			builder.put(grammarAccess.getTypeExpressionAccess().getGroup(), "rule__TypeExpression__Group__0");
			builder.put(grammarAccess.getTypeExpressionAccess().getGroup_1(), "rule__TypeExpression__Group_1__0");
			builder.put(grammarAccess.getTypeExpressionAccess().getGroup_6(), "rule__TypeExpression__Group_6__0");
			builder.put(grammarAccess.getMovesAccess().getGroup(), "rule__Moves__Group__0");
			builder.put(grammarAccess.getMoveAccess().getGroup(), "rule__Move__Group__0");
			builder.put(grammarAccess.getMEffectAccess().getGroup(), "rule__MEffect__Group__0");
			builder.put(grammarAccess.getBEffectAccess().getGroup(), "rule__BEffect__Group__0");
			builder.put(grammarAccess.getAEffectAccess().getGroup(), "rule__AEffect__Group__0");
			builder.put(grammarAccess.getETypeAccess().getGroup(), "rule__EType__Group__0");
			builder.put(grammarAccess.getAttributeValuesAccess().getGroup(), "rule__AttributeValues__Group__0");
			builder.put(grammarAccess.getAltAttributeAccess().getGroup(), "rule__AltAttribute__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_0(), "rule__Rule__Group_0__0");
			builder.put(grammarAccess.getAdditionalRuleAccess().getGroup(), "rule__AdditionalRule__Group__0");
			builder.put(grammarAccess.getAdditionalBuffRuleAccess().getGroup(), "rule__AdditionalBuffRule__Group__0");
			builder.put(grammarAccess.getEntitiesAccess().getGroup(), "rule__Entities__Group__0");
			builder.put(grammarAccess.getDeathAccess().getGroup(), "rule__Death__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
			builder.put(grammarAccess.getEntityMovesAccess().getGroup(), "rule__EntityMoves__Group__0");
			builder.put(grammarAccess.getTeamsAccess().getGroup(), "rule__Teams__Group__0");
			builder.put(grammarAccess.getTeamAccess().getGroup(), "rule__Team__Group__0");
			builder.put(grammarAccess.getMembersAccess().getGroup(), "rule__Members__Group__0");
			builder.put(grammarAccess.getRequireAccess().getGroup(), "rule__Require__Group__0");
			builder.put(grammarAccess.getORconditionAccess().getGroup(), "rule__ORcondition__Group__0");
			builder.put(grammarAccess.getORconditionAccess().getGroup_1(), "rule__ORcondition__Group_1__0");
			builder.put(grammarAccess.getANDconditionAccess().getGroup(), "rule__ANDcondition__Group__0");
			builder.put(grammarAccess.getANDconditionAccess().getGroup_1(), "rule__ANDcondition__Group_1__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
			builder.put(grammarAccess.getNumberComparingAccess().getGroup(), "rule__NumberComparing__Group__0");
			builder.put(grammarAccess.getComparatorAccess().getGroup_0(), "rule__Comparator__Group_0__0");
			builder.put(grammarAccess.getComparatorAccess().getGroup_1(), "rule__Comparator__Group_1__0");
			builder.put(grammarAccess.getComparatorAccess().getGroup_2(), "rule__Comparator__Group_2__0");
			builder.put(grammarAccess.getComparatorAccess().getGroup_3(), "rule__Comparator__Group_3__0");
			builder.put(grammarAccess.getComparatorAccess().getGroup_4(), "rule__Comparator__Group_4__0");
			builder.put(grammarAccess.getComparatorAccess().getGroup_5(), "rule__Comparator__Group_5__0");
			builder.put(grammarAccess.getSumAccess().getGroup(), "rule__Sum__Group__0");
			builder.put(grammarAccess.getSumAccess().getGroup_1(), "rule__Sum__Group_1__0");
			builder.put(grammarAccess.getSumAccess().getGroup_1_0_0(), "rule__Sum__Group_1_0_0__0");
			builder.put(grammarAccess.getSumAccess().getGroup_1_0_1(), "rule__Sum__Group_1_0_1__0");
			builder.put(grammarAccess.getMultiplyAccess().getGroup(), "rule__Multiply__Group__0");
			builder.put(grammarAccess.getMultiplyAccess().getGroup_1(), "rule__Multiply__Group_1__0");
			builder.put(grammarAccess.getMultiplyAccess().getGroup_1_0_0(), "rule__Multiply__Group_1_0_0__0");
			builder.put(grammarAccess.getMultiplyAccess().getGroup_1_0_1(), "rule__Multiply__Group_1_0_1__0");
			builder.put(grammarAccess.getFloatNumAccess().getGroup(), "rule__FloatNum__Group__0");
			builder.put(grammarAccess.getSystemRPGAccess().getNameAssignment_1(), "rule__SystemRPG__NameAssignment_1");
			builder.put(grammarAccess.getSystemRPGAccess().getDeclarationsAssignment_2(), "rule__SystemRPG__DeclarationsAssignment_2");
			builder.put(grammarAccess.getEffectsAccess().getEffectAssignment_1(), "rule__Effects__EffectAssignment_1");
			builder.put(grammarAccess.getBuffAccess().getNameAssignment_1(), "rule__Buff__NameAssignment_1");
			builder.put(grammarAccess.getBuffAccess().getRuleAssignment_2(), "rule__Buff__RuleAssignment_2");
			builder.put(grammarAccess.getBuffAccess().getExtraRuleAssignment_3_1(), "rule__Buff__ExtraRuleAssignment_3_1");
			builder.put(grammarAccess.getMoveEAccess().getNameAssignment_1(), "rule__MoveE__NameAssignment_1");
			builder.put(grammarAccess.getMoveEAccess().getRuleAssignment_2(), "rule__MoveE__RuleAssignment_2");
			builder.put(grammarAccess.getMoveEAccess().getExtraRuleAssignment_3_1(), "rule__MoveE__ExtraRuleAssignment_3_1");
			builder.put(grammarAccess.getAfterEAccess().getNameAssignment_1(), "rule__AfterE__NameAssignment_1");
			builder.put(grammarAccess.getAfterEAccess().getRuleAssignment_2(), "rule__AfterE__RuleAssignment_2");
			builder.put(grammarAccess.getAttributesAccess().getAttributeAssignment_1(), "rule__Attributes__AttributeAssignment_1");
			builder.put(grammarAccess.getAttributeAccess().getModifiedAssignment_0(), "rule__Attribute__ModifiedAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_2(), "rule__Attribute__NameAssignment_2");
			builder.put(grammarAccess.getAttributeAccess().getAValAssignment_3(), "rule__Attribute__AValAssignment_3");
			builder.put(grammarAccess.getLocationsAccess().getLocAssignment_1(), "rule__Locations__LocAssignment_1");
			builder.put(grammarAccess.getLocAccess().getNameAssignment_0(), "rule__Loc__NameAssignment_0");
			builder.put(grammarAccess.getLocAccess().getTipeAssignment_1_1(), "rule__Loc__TipeAssignment_1_1");
			builder.put(grammarAccess.getLocAccess().getEffAssignment_1_3(), "rule__Loc__EffAssignment_1_3");
			builder.put(grammarAccess.getLocAccess().getTeamAssignment_3(), "rule__Loc__TeamAssignment_3");
			builder.put(grammarAccess.getRelationsAccess().getTypeAssignment_2(), "rule__Relations__TypeAssignment_2");
			builder.put(grammarAccess.getRelationModifiersAccess().getSynAssignment_2(), "rule__RelationModifiers__SynAssignment_2");
			builder.put(grammarAccess.getRelationModifiersAccess().getEffAssignment_4(), "rule__RelationModifiers__EffAssignment_4");
			builder.put(grammarAccess.getRelationModifiersAccess().getIneffAssignment_6(), "rule__RelationModifiers__IneffAssignment_6");
			builder.put(grammarAccess.getTypeAccess().getNameAssignment_1(), "rule__Type__NameAssignment_1");
			builder.put(grammarAccess.getTypeAccess().getTExpressionAssignment_2(), "rule__Type__TExpressionAssignment_2");
			builder.put(grammarAccess.getTypeExpressionAccess().getStrongAssignment_0(), "rule__TypeExpression__StrongAssignment_0");
			builder.put(grammarAccess.getTypeExpressionAccess().getStrong2Assignment_1_1(), "rule__TypeExpression__Strong2Assignment_1_1");
			builder.put(grammarAccess.getTypeExpressionAccess().getCurrentTAssignment_3(), "rule__TypeExpression__CurrentTAssignment_3");
			builder.put(grammarAccess.getTypeExpressionAccess().getWeakAssignment_5(), "rule__TypeExpression__WeakAssignment_5");
			builder.put(grammarAccess.getTypeExpressionAccess().getWeak2Assignment_6_1(), "rule__TypeExpression__Weak2Assignment_6_1");
			builder.put(grammarAccess.getMovesAccess().getMoveAssignment_1(), "rule__Moves__MoveAssignment_1");
			builder.put(grammarAccess.getMoveAccess().getNameAssignment_1(), "rule__Move__NameAssignment_1");
			builder.put(grammarAccess.getMoveAccess().getETypeAssignment_2(), "rule__Move__ETypeAssignment_2");
			builder.put(grammarAccess.getMoveAccess().getAttAssignment_3(), "rule__Move__AttAssignment_3");
			builder.put(grammarAccess.getMoveAccess().getMEffectAssignment_4_0(), "rule__Move__MEffectAssignment_4_0");
			builder.put(grammarAccess.getMoveAccess().getBEffectAssignment_4_1(), "rule__Move__BEffectAssignment_4_1");
			builder.put(grammarAccess.getMoveAccess().getAEffectAssignment_4_2(), "rule__Move__AEffectAssignment_4_2");
			builder.put(grammarAccess.getMEffectAccess().getMoveENameAssignment_2(), "rule__MEffect__MoveENameAssignment_2");
			builder.put(grammarAccess.getBEffectAccess().getBuffENameAssignment_2(), "rule__BEffect__BuffENameAssignment_2");
			builder.put(grammarAccess.getAEffectAccess().getAfterENameAssignment_2(), "rule__AEffect__AfterENameAssignment_2");
			builder.put(grammarAccess.getETypeAccess().getTypeAssignment_1(), "rule__EType__TypeAssignment_1");
			builder.put(grammarAccess.getAttributeValuesAccess().getLTypesAssignment_1_0(), "rule__AttributeValues__LTypesAssignment_1_0");
			builder.put(grammarAccess.getAttributeValuesAccess().getAnAssignment_1_1(), "rule__AttributeValues__AnAssignment_1_1");
			builder.put(grammarAccess.getAltAttributeAccess().getAttributeAssignment_1(), "rule__AltAttribute__AttributeAssignment_1");
			builder.put(grammarAccess.getAltAttributeAccess().getAvAssignment_2(), "rule__AltAttribute__AvAssignment_2");
			builder.put(grammarAccess.getRuleAccess().getOrAssignment_0_1(), "rule__Rule__OrAssignment_0_1");
			builder.put(grammarAccess.getRuleAccess().getTargetAssignment_1(), "rule__Rule__TargetAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getSumAssignment_3(), "rule__Rule__SumAssignment_3");
			builder.put(grammarAccess.getAdditionalRuleAccess().getTargetAssignment_0(), "rule__AdditionalRule__TargetAssignment_0");
			builder.put(grammarAccess.getAdditionalRuleAccess().getSumAssignment_2(), "rule__AdditionalRule__SumAssignment_2");
			builder.put(grammarAccess.getAdditionalRuleAccess().getHitsAssignment_4_0(), "rule__AdditionalRule__HitsAssignment_4_0");
			builder.put(grammarAccess.getAdditionalRuleAccess().getHitsAssignment_4_1(), "rule__AdditionalRule__HitsAssignment_4_1");
			builder.put(grammarAccess.getAdditionalBuffRuleAccess().getTargetAssignment_0(), "rule__AdditionalBuffRule__TargetAssignment_0");
			builder.put(grammarAccess.getAdditionalBuffRuleAccess().getSumAssignment_2(), "rule__AdditionalBuffRule__SumAssignment_2");
			builder.put(grammarAccess.getEntitiesAccess().getEntityAssignment_1(), "rule__Entities__EntityAssignment_1");
			builder.put(grammarAccess.getDeathAccess().getReqAssignment_1(), "rule__Death__ReqAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getExtendAssignment_2_1(), "rule__Entity__ExtendAssignment_2_1");
			builder.put(grammarAccess.getEntityAccess().getETypeAssignment_3(), "rule__Entity__ETypeAssignment_3");
			builder.put(grammarAccess.getEntityAccess().getAttAssignment_4(), "rule__Entity__AttAssignment_4");
			builder.put(grammarAccess.getEntityAccess().getEMovesAssignment_5(), "rule__Entity__EMovesAssignment_5");
			builder.put(grammarAccess.getEntityMovesAccess().getMoveAssignment_1(), "rule__EntityMoves__MoveAssignment_1");
			builder.put(grammarAccess.getTeamsAccess().getTeamAssignment_1(), "rule__Teams__TeamAssignment_1");
			builder.put(grammarAccess.getTeamAccess().getNameAssignment_1(), "rule__Team__NameAssignment_1");
			builder.put(grammarAccess.getTeamAccess().getMembersAssignment_2(), "rule__Team__MembersAssignment_2");
			builder.put(grammarAccess.getMembersAccess().getEntityAssignment_1(), "rule__Members__EntityAssignment_1");
			builder.put(grammarAccess.getRequireAccess().getLogAssignment_1(), "rule__Require__LogAssignment_1");
			builder.put(grammarAccess.getORconditionAccess().getRightAssignment_1_2(), "rule__ORcondition__RightAssignment_1_2");
			builder.put(grammarAccess.getANDconditionAccess().getRightAssignment_1_2(), "rule__ANDcondition__RightAssignment_1_2");
			builder.put(grammarAccess.getNumberComparingAccess().getLeftAssignment_0(), "rule__NumberComparing__LeftAssignment_0");
			builder.put(grammarAccess.getNumberComparingAccess().getCompAssignment_1(), "rule__NumberComparing__CompAssignment_1");
			builder.put(grammarAccess.getNumberComparingAccess().getRightAssignment_2(), "rule__NumberComparing__RightAssignment_2");
			builder.put(grammarAccess.getSumAccess().getRightAssignment_1_1(), "rule__Sum__RightAssignment_1_1");
			builder.put(grammarAccess.getMultiplyAccess().getRightAssignment_1_1(), "rule__Multiply__RightAssignment_1_1");
			builder.put(grammarAccess.getNameAttributeAccess().getAttributeAssignment(), "rule__NameAttribute__AttributeAssignment");
			builder.put(grammarAccess.getIntNumAccess().getValueAssignment(), "rule__IntNum__ValueAssignment");
			builder.put(grammarAccess.getFloatNumAccess().getIAssignment_0(), "rule__FloatNum__IAssignment_0");
			builder.put(grammarAccess.getFloatNumAccess().getDecimalAssignment_2(), "rule__FloatNum__DecimalAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RPGGrammarAccess grammarAccess;

	@Override
	protected InternalRPGParser createParser() {
		InternalRPGParser result = new InternalRPGParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RPGGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RPGGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
